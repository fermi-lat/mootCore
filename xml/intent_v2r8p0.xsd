<?xml version="1.0" encoding="UTF-8" ?>
<xs:schema xmlns:xs='http://www.w3.org/2001/XMLSchema'
           xmlns:xi="http://www.w3.org/2001/XInclude"
    elementFormDefault="unqualified" >

<!-- Element and type definitions herein are in bottom-up order;
     for the most part elements and datatypes are defined before
     they're referenced.
 -->
  <!-- alias names in text -->
  <xs:simpleType name="simpleAliasType">
    <xs:restriction base="xs:string" />
  </xs:simpleType>

  <xs:element name="paramsNeeded" type="xs:string" />

  <!-- register values may be expressed in decimal or in hex -->
  <xs:simpleType name="regValueType">
    <xs:restriction base="xs:string">
      <xs:pattern value="0x[0-9A-Fa-f]{1,16}" />
      <xs:pattern value="[1-9][0-9]*" />
      <xs:pattern value="0" />
    </xs:restriction >
  </xs:simpleType>  

  <!-- spt names look like '+x0' or '-y3' -->
  <xs:simpleType name="sptNameType">
    <xs:restriction base="xs:string">
      <xs:pattern value="\+x[0-8]" />
      <xs:pattern value="\-x[0-8]" />
      <xs:pattern value="\+y[0-8]" />
      <xs:pattern value="\-y[0-8]" />
    </xs:restriction >
  </xs:simpleType>  

  <!-- tile names look like '000' or 'NA0' -->
  <xs:simpleType name="tileListType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[NA0-9 ]*"/>      
    </xs:restriction >
  </xs:simpleType>  

 <!-- pmt names look like '000:A' or 'NA0:B' -->
  <xs:simpleType name="pmtListType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[NAB0-9: ]*"/>      
    </xs:restriction >
  </xs:simpleType>  
  
 <!-- roi names are a single hex digit -->
  <xs:simpleType name="roiNameType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[0-9a-fA-F]"/>
    </xs:restriction >
  </xs:simpleType>  

<!-- According to schema spec, the value space for the type is the 
     OR of the values defined by each <xs:pattern.. > 
 -->
  <xs:simpleType name="doubleRegType">
    <xs:restriction base="xs:string" >
      <xs:pattern value="0x[0-9A-Fa-f]{1,8}:0x[0-9A-Fa-f]{1,8}" />
      <xs:pattern value="0x[0-9A-Fa-f]{1,8}:[1-9][0-9]{1,}" />
      <xs:pattern value="0x[0-9A-Fa-f]{1,8}:0" />
      <xs:pattern value="[1-9][0-9]*:0x[0-9A-Fa-f]{1,8}" />
      <xs:pattern value="0:0x[0-9A-Fa-f]{1,8}" />
      <xs:pattern value="[1-9][0-9]*:[1-9][0-9]*" />

      <xs:pattern value="0:[1-9][0-9]*" />
      <xs:pattern value="[1-9][0-9]*:0" />
      <xs:pattern value="0:0" />
    </xs:restriction>
  </xs:simpleType >

  <xs:simpleType name="nonnegFloat">
    <xs:restriction base="xs:float">
      <xs:minInclusive value="0" />
    </xs:restriction>
  </xs:simpleType>


  <xs:simpleType name="triState">
    <xs:restriction base="xs:string">
      <xs:pattern value="[01x]" />
    </xs:restriction>
  </xs:simpleType>


  <xs:element name="broadcast" type="regValueType" />
  <xs:element name="broadcastDouble" type="doubleRegType" />

  <xs:element name="singleton" type="regValueType" />

  <xs:element name="broadcastField" >
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="regValueType">
          <xs:attribute name="name" use="required" type="xs:Name" />
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="singletonField" >
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="regValueType">
          <xs:attribute name="name" use="required" type="xs:Name" />
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>


<!-- Register elements contain <singleton>, arbitrary # of <singletonField>,
     <broadcast>, <broadcastDouble>,  or an arbitrary number
     of <broadcastField> elements.  In the latter 3 cases an arbitrary
     number of <except> elements may be appended
 -->
  <xs:complexType name="registerType">
    <xs:choice>
      <xs:element ref="singleton" />
      <xs:element ref="singletonField" maxOccurs="unbounded" 
                         minOccurs="0" />
      <xs:sequence>
        <xs:choice>
          <xs:element ref="broadcastField" maxOccurs="unbounded" 
                        minOccurs="0" />
          <xs:element ref="broadcast"  />
        </xs:choice>
        <xs:element name="except" minOccurs="0" maxOccurs="unbounded" >
          <xs:complexType>
            <xs:simpleContent >
              <xs:extension base="regValueType">
                <xs:attributeGroup ref="exceptGroup" />
              </xs:extension >
            </xs:simpleContent>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
      <xs:sequence>
        <xs:element ref="broadcastDouble"  />
        <xs:element name="exceptDouble" minOccurs="0" maxOccurs="unbounded" >
          <xs:complexType>
            <xs:simpleContent >
              <xs:extension base="doubleRegType">
                <xs:attributeGroup ref="exceptGroup" />
              </xs:extension >
            </xs:simpleContent>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:choice>
  </xs:complexType>

<!-- roiSet elements have an attribute 'roi' and then a tileList -->
  <xs:complexType name="roiSetType">
    <xs:simpleContent>
      <xs:extension base="tileListType">
        <xs:attribute name="roi" type="roiNameType" use="required" />
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>


<!-- attribute group to be used by output-file-container-type elements
     (of the form PRECINCT-param or PRECINCT-offline where PRECINCT
     is replaced by a precinct name -->
  <xs:attributeGroup name="outfileAttGroup">
    <xs:attribute name="stub" type="xs:string" use="optional" />
  </xs:attributeGroup>

  <xs:attributeGroup name="exceptGroup">
    <xs:attribute name="garc" type="xs:unsignedByte" />
    <xs:attribute name="gafe" type="xs:unsignedByte" />
    <xs:attribute name="tem" type="xs:unsignedByte" />
    <xs:attribute name="ccc" type="xs:unsignedByte" />
    <xs:attribute name="crc" type="xs:unsignedByte"  />
    <xs:attribute name="cfe" type="xs:unsignedByte"  />
    <xs:attribute name="spt" type="sptNameType"  />
    <xs:attribute name="tfe" type="xs:unsignedByte"  />
    <xs:attribute name="tcc" type="xs:unsignedByte"  />
    <xs:attribute name="trc" type="xs:unsignedByte"  />
    <xs:attribute name="tic" type="xs:unsignedByte"  />
    <xs:attribute name="field" type="xs:Name" />
  </xs:attributeGroup>

  <xs:attributeGroup name="engineGroup">
    <xs:attribute name="number" type="xs:unsignedByte" />
    <xs:attribute name="calstrobe" type="xs:unsignedByte" />
    <xs:attribute name="fourrange" type="xs:unsignedByte" />
    <xs:attribute name="inhibit" type="xs:unsignedByte" />
    <xs:attribute name="marker" type="xs:unsignedByte"  />
    <xs:attribute name="prescale" type="xs:unsignedByte"  />
    <xs:attribute name="tack" type="xs:unsignedByte"  />
    <xs:attribute name="zerosuppress" type="xs:unsignedByte"  />
  </xs:attributeGroup>

  <xs:attributeGroup name="ruleGroup">
    <xs:attribute name="number" type="xs:unsignedByte" />
    <xs:attribute name="engine" type="xs:unsignedByte" />
    <xs:attribute name="ext" type="triState" />
    <xs:attribute name="sol" type="triState" />
    <xs:attribute name="per" type="triState" />
    <xs:attribute name="cno" type="triState" />
    <xs:attribute name="chi" type="triState" />
    <xs:attribute name="clo" type="triState" />
    <xs:attribute name="tkr" type="triState" />
    <xs:attribute name="roi" type="triState" />
  </xs:attributeGroup>
 
  <xs:attributeGroup name="trcGroup">
    <xs:attribute name="ID" type="xs:unsignedByte" />
    <xs:attribute name="buffer_size" type="xs:unsignedByte" />
    <xs:attribute name="or_stretch" type="xs:unsignedByte" />
    <xs:attribute name="split_point" type="xs:unsignedByte" />
  </xs:attributeGroup>


  <!-- Make a type for empty output file container elements
       (since they occur often -->
  <xs:complexType name="noOutfilesType" >
    <xs:sequence />
    <xs:attributeGroup ref="outfileAttGroup" />
  </xs:complexType >

<!-- attribute group to be used by ancillary file elements -->
  <xs:attributeGroup name="ancAttributes" >
    <xs:attribute name="perTower" type="xs:boolean" default="false" />
    <xs:attribute name="nickname" type="xs:Name" use="required" />
  </xs:attributeGroup>

<!-- base type for ancillary file elements.  Content is alias name -->
  <xs:complexType name="ancFileType"  >
    <xs:simpleContent >
      <!-- <xs:extension base ="xs:Name" >  -->
      <xs:extension base ="xs:string" >
      <xs:attributeGroup ref="ancAttributes" />
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>


<!-- Base type for elements with no content and no attributes.
     It's convenient to be able to refer to this for many of the
     containers which, depending on precinct, may always be empty
  -->
  <xs:complexType name="emptyBaseType">
    <xs:sequence />
  </xs:complexType>

  <!-- param files may depend on one or more ancillary files -->
  <xs:complexType name="paramFileType" >
    <xs:sequence>
      <xs:element name="ancRef" minOccurs="0" maxOccurs="unbounded" >
        <xs:complexType>
          <xs:attribute name="refTo" type="xs:Name" use="required" />
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:element name="emptyBase" type="emptyBaseType" />


  <xs:element name="method" >
    <xs:complexType >
      <xs:simpleContent>
        <xs:extension base="xs:string" >
          <xs:attribute name="comment" type="xs:string" />
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="ACD_Mode-registers" >
    <xs:complexType>
      <xs:all minOccurs="1">
<!-- 4jul  <xs:element name="AEM_aem_configuration" type="registerType" /> -->
        <xs:element name="AFE_config_reg" type="registerType" />
        <xs:element name="AFE_tci_dac" type="registerType" />
        <xs:element name="ARC_max_pha" type="registerType" />
        <xs:element name="ARC_pha_en" type="registerType" />
        <xs:element name="ARC_veto_en" type="registerType" />
      </xs:all>
    </xs:complexType>
  </xs:element>

  <xs:element name="ACD_Mode-param" >
    <xs:complexType>
      <xs:all minOccurs="1" >
        <xs:element name="latc_AEM_ACD_Mode" type="paramFileType" />
        <xs:element name="latc_ARC_ACD_Mode" type="paramFileType" 
                    minOccurs="0"/>
        <xs:element name="latc_AFE_ACD_Mode" type="paramFileType" 
                    minOccurs="0"/>
        <xs:element name="latc_DFT_ACD_Mode" type="paramFileType" />
      </xs:all>  
      <xs:attributeGroup ref="outfileAttGroup" />
    </xs:complexType>
  </xs:element>

  <!-- xs:element name="ACD_Mode-anc" type="emptyBaseType" / -->
  <xs:element name="ACD_Mode-anc" >
    <xs:complexType>
      <xs:all minOccurs="0" >
        <xs:element name="ACD_Mask" type="ancFileType" />
      </xs:all>  
    </xs:complexType>
  </xs:element>


  <xs:element name="ACD_Mode-constants" type="emptyBaseType" />

  <xs:element name="ACD_Mode-offline" type="noOutfilesType" />

  <xs:element name="ACD_Mode" >
    <xs:annotation>
      <xs:documentation> Element to specify intent for ACD_Mode precinct
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="method" />
        <xs:element ref="ACD_Mode-registers" />
        <xs:element ref="ACD_Mode-constants" />
        <xs:element ref="ACD_Mode-anc" />
        <xs:choice >
          <xs:element ref="ACD_Mode-param" />
          <xs:element ref="paramsNeeded" />
        </xs:choice>
        <xs:element ref="ACD_Mode-offline" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

<!--   ***** ACD_Bias starts here ****** -->

  <xs:element name="ACD_Bias-registers" >
    <xs:complexType>
      <xs:sequence >
        <xs:element name="AFE_bias_dac" type="registerType" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="ACD_Bias-anc" >
    <xs:complexType >
      <xs:all minOccurs="0" >
        <xs:element name="ACD_BiasSettings" type="ancFileType" 
	minOccurs="0" 	/>
      </xs:all>
    </xs:complexType>
  </xs:element>

  <xs:element name="ACD_Bias-param" >
    <xs:complexType>
      <xs:all minOccurs="1" >
        <xs:element name="latc_AFE_ACD_Bias" type="paramFileType" 
                    minOccurs="0"/>
        <xs:element name="latc_DFT_ACD_Bias" type="paramFileType" />
      </xs:all>  
      <xs:attributeGroup ref="outfileAttGroup" />
    </xs:complexType>
  </xs:element>

  <xs:element name="ACD_Bias-constants" type="emptyBaseType" />

  <xs:element name="ACD_Bias-offline" type="noOutfilesType" />

  <xs:element name="ACD_Bias" >
    <xs:annotation>
      <xs:documentation> Element to specify intent for ACD_Bias precinct
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="method" />
        <xs:element ref="ACD_Bias-registers" />
        <xs:element ref="ACD_Bias-constants" />
        <xs:element ref="ACD_Bias-anc" />
        <xs:choice>
          <xs:element ref="ACD_Bias-param" />
          <xs:element ref="paramsNeeded" />
        </xs:choice>
        <xs:element ref="ACD_Bias-offline" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

<!--   ACD_Hld -->
  <xs:element name="ACD_Hld-registers" >
    <xs:complexType>
      <xs:sequence >
        <xs:element name="AFE_hld_dac" type="registerType" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="ACD_Hld-anc" >
    <xs:complexType >
      <xs:all minOccurs="0" >
        <xs:element name="ACD_HldSettings" type="ancFileType" 
                    minOccurs="0"/>
      </xs:all>
    </xs:complexType>
  </xs:element>

  <xs:element name="ACD_Hld-param" >
    <xs:complexType>
      <xs:all minOccurs="1" >
        <xs:element name="latc_AFE_ACD_Hld" type="paramFileType" 
                    minOccurs="0" />
        <xs:element name="latc_DFT_ACD_Hld" type="paramFileType" />
      </xs:all>  
      <xs:attributeGroup ref="outfileAttGroup" />
    </xs:complexType>
  </xs:element>

  <xs:element name="ACD_Hld-constants" type="emptyBaseType" />

  <xs:element name="ACD_Hld-offline" type="noOutfilesType" />

  <xs:element name="ACD_Hld" >
    <xs:annotation>
      <xs:documentation> Element to specify intent for ACD_Hld precinct
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="method" />
        <xs:element ref="ACD_Hld-registers" />
        <xs:element ref="ACD_Hld-constants" />
        <xs:element ref="ACD_Hld-anc" />
        <xs:choice>
          <xs:element ref="ACD_Hld-param" />
          <xs:element ref="paramsNeeded" />
        </xs:choice>
        <xs:element ref="ACD_Hld-offline" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

<!-- ACD_PHA -->

  <xs:element name="ACD_PHA-registers" >
    <xs:complexType>
      <xs:sequence >
        <xs:element name="ARC_pha_threshold" type="registerType" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="ACD_PHA-anc" >
    <xs:complexType >
      <xs:all minOccurs="0" >
        <xs:element name="ACD_PedestalCalibration" type="ancFileType"
                    minOccurs="0" />
      </xs:all>
    </xs:complexType>
  </xs:element>

  <xs:element name="ACD_PHA-param" >
    <xs:complexType>
      <xs:all minOccurs="1" >
        <xs:element name="latc_ARC_ACD_PHA" type="paramFileType"
                    minOccurs="0" />
        <xs:element name="latc_DFT_ACD_PHA" type="paramFileType" />
      </xs:all>  
      <xs:attributeGroup ref="outfileAttGroup" />
    </xs:complexType>
  </xs:element>

  <xs:element name="ACD_PHA-constants" >
    <xs:complexType>
      <xs:sequence>
        <xs:element name="countsAbovePedestal" type="xs:unsignedShort" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="ACD_PHA-offline" type="noOutfilesType" />

  <xs:element name="ACD_PHA" >
    <xs:annotation>
      <xs:documentation> Element to specify intent for ACD_PHA precinct
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="method" />
        <xs:element ref="ACD_PHA-registers" />
        <xs:element ref="ACD_PHA-constants" />
        <xs:element ref="ACD_PHA-anc" />
        <xs:choice>
          <xs:element ref="ACD_PHA-param" />
          <xs:element ref="paramsNeeded" />
        </xs:choice>
        <xs:element ref="ACD_PHA-offline" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

<!-- ACD_Veto -->
  <xs:element name="ACD_Veto-registers" >
    <xs:complexType>
      <xs:all >
        <xs:element name="AFE_veto" type="registerType" />
      </xs:all>
    </xs:complexType>
  </xs:element>

  <xs:element name="ACD_Veto-anc" >
    <xs:complexType >
      <xs:all minOccurs="0">
        <xs:element name="ACD_PedestalCalibration" type="ancFileType" 
                    minOccurs="0" />
        <xs:element name="ACD_MIPCalibration" type="ancFileType" 
                    minOccurs="0"/>
        <xs:element name="ACD_VetoElectronicsCalibration" type="ancFileType"
                    minOccurs="0" />
        <xs:element name="ACD_VetoSettings" type="ancFileType"
                    minOccurs="0" />
      </xs:all>
    </xs:complexType>
  </xs:element>

  <xs:element name="ACD_Veto-param" >
    <xs:complexType>
      <xs:all  >
        <xs:element name="latc_AFE_ACD_Veto" type="paramFileType" 
                    minOccurs="0" />
        <xs:element name="latc_DFT_ACD_Veto" type="paramFileType" />
      </xs:all>  
      <xs:attributeGroup ref="outfileAttGroup" />
    </xs:complexType>
  </xs:element>

  <xs:element name="ACD_Veto-constants" >
    <xs:complexType>
      <xs:sequence>
        <xs:element name="TileMip" type="nonnegFloat" minOccurs="1"/> 
        <xs:element name="RibbonMip" type="nonnegFloat" minOccurs="1"/>
        <xs:element name="NaMip" type="nonnegFloat" minOccurs="1"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="ACD_Veto-offline" type="noOutfilesType" />

  <xs:element name="ACD_Veto" >
    <xs:annotation>
      <xs:documentation> Element to specify intent for ACD_Veto precinct
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="method" />
        <xs:element ref="ACD_Veto-registers" />
        <xs:element ref="ACD_Veto-constants" />
        <xs:element ref="ACD_Veto-anc" />
        <xs:choice>
          <xs:element ref="ACD_Veto-param" />
          <xs:element ref="paramsNeeded" />
        </xs:choice>
        <xs:element ref="ACD_Veto-offline" />
      </xs:sequence>
    </xs:complexType>


  </xs:element>

<!-- ACD_Timing -->
  <xs:element name="ACD_Timing-registers" >
    <xs:complexType>
      <xs:all >
        <xs:element name="ARC_veto_delay" type="registerType" />
        <xs:element name="ARC_veto_width" type="registerType" />
        <xs:element name="ARC_hold_delay" type="registerType" />
        <xs:element name="ARC_hitmap_width" type="registerType" />
        <xs:element name="ARC_hitmap_delay" type="registerType" />
        <xs:element name="ARC_hitmap_deadtime" type="registerType" />
        <xs:element name="ARC_adc_tacq" type="registerType" />
      </xs:all>
    </xs:complexType>
  </xs:element>

  <xs:element name="ACD_Timing-anc" type="emptyBaseType" />

  <xs:element name="ACD_Timing-param" >
    <xs:complexType>
      <xs:all  minOccurs="0">
        <xs:element name="latc_ARC_ACD_Timing" type="paramFileType" 
                    minOccurs="0" />
        <xs:element name="latc_DFT_ACD_Timing" type="paramFileType" />
      </xs:all>  
      <xs:attributeGroup ref="outfileAttGroup" />
    </xs:complexType>
  </xs:element>

  <xs:element name="ACD_Timing-constants" type="emptyBaseType" />

  <xs:element name="ACD_Timing-offline" type="noOutfilesType" />

  <xs:element name="ACD_Timing" >
    <xs:annotation>
      <xs:documentation> Element to specify intent for ACD_Timing precinct
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="method" />
        <xs:element ref="ACD_Timing-registers" />
        <xs:element ref="ACD_Timing-constants" />
        <xs:element ref="ACD_Timing-anc" />
        <xs:choice>
          <xs:element ref="ACD_Timing-param" />
          <xs:element ref="paramsNeeded" />
        </xs:choice>
        <xs:element ref="ACD_Timing-offline" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>



<!-- Start CAL; CAL_Mode -->
  <xs:element name="CAL_Mode-registers" >
    <xs:complexType>
      <xs:all minOccurs="1">
        <xs:element name="CCC_ccc_configuration" type="registerType" />
        <xs:element name="CCC_layer_mask" type="registerType" />
        <xs:element name="CRC_crc_dac" type="registerType" />
        <xs:element name="CRC_config" type="registerType" />  
<!--        <xs:element name="CFE_config" type="registerType" />    -->
        <xs:element name="CFE_config_0" type="registerType" />
        <xs:element name="CFE_config_1" type="registerType" />
        <xs:element name="CFE_ref_dac" type="registerType" />
      </xs:all>
    </xs:complexType>
  </xs:element>

  <xs:element name="CAL_Mode-param" >
    <xs:complexType>
      <xs:all minOccurs="1" >
<!--        <xs:element name="latc_TEM_CAL_Mode" type="paramFileType" /> -->
        <xs:element name="latc_CCC_CAL_Mode" type="paramFileType"
                          minOccurs="0" />
        <xs:element name="latc_CRC_CAL_Mode" type="paramFileType"
                          minOccurs="0" />
        <xs:element name="latc_CFE_CAL_Mode" type="paramFileType"
                          minOccurs="0" />
        <xs:element name="latc_DFT_CAL_Mode" type="paramFileType" />
      </xs:all>  
      <xs:attributeGroup ref="outfileAttGroup" />
    </xs:complexType>
  </xs:element>

  <!-- xs:element name="CAL_Mode-anc" type="emptyBaseType" /  -->
  <xs:element name="CAL_Mode-anc" >
    <xs:complexType>
      <xs:all minOccurs="0" >
        <xs:element name="CAL_Mask" type="ancFileType"/>
      </xs:all>  
    </xs:complexType>
  </xs:element>
  <xs:element name="CAL_Mode-constants" type="emptyBaseType" />

  <xs:element name="CAL_Mode-offline" type="noOutfilesType" />

  <xs:element name="CAL_Mode" >
    <xs:annotation>
      <xs:documentation> Element to specify intent for CAL_Mode precinct
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="method" />
        <xs:element ref="CAL_Mode-registers" />
        <xs:element ref="CAL_Mode-constants" />
        <xs:element ref="CAL_Mode-anc" />
        <xs:choice>
          <xs:element ref="CAL_Mode-param" />
          <xs:element ref="paramsNeeded" />
        </xs:choice>
        <xs:element ref="CAL_Mode-offline" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

<!-- end CAL_Mode -->

<!-- CAL_Timing -->
  <xs:element name="CAL_Timing-registers" >
    <xs:complexType>
      <xs:all >
<!--        <xs:element name="TEM_caltrgseq" type="registerType" />  -->
        <xs:element name="CCC_ccc_trg_alignment" type="registerType" />
        <xs:element name="CRC_delay_1" type="registerType" />
        <xs:element name="CRC_delay_2" type="registerType" />
        <xs:element name="CRC_delay_3" type="registerType" />
      </xs:all>
    </xs:complexType>
  </xs:element>

  <xs:element name="CAL_Timing-anc" >
    <xs:complexType >
      <xs:all minOccurs="0" >
        <xs:element name="CAL_trg_alignment" type="ancFileType"
                         minOccurs="0" />
        <xs:element name="CAL_TACK_delay" type="ancFileType"
                         minOccurs="0" />
      </xs:all>
    </xs:complexType >
  </xs:element>

  <xs:element name="CAL_Timing-param" >
    <xs:complexType>
      <xs:all  minOccurs="0">
<!--        <xs:element name="latc_TEM_CAL_Timing" type="paramFileType" /> -->
        <xs:element name="latc_CCC_CAL_Timing" type="paramFileType"
                          minOccurs="0" />
        <xs:element name="latc_CRC_CAL_Timing" type="paramFileType"
                          minOccurs="0" />
        <xs:element name="latc_DFT_CAL_Timing" type="paramFileType" />
      </xs:all>  
      <xs:attributeGroup ref="outfileAttGroup" />
    </xs:complexType>
  </xs:element>

  <xs:element name="CAL_Timing-constants" type="emptyBaseType" />

  <xs:element name="CAL_Timing-offline" type="noOutfilesType" />

  <xs:element name="CAL_Timing" >
    <xs:annotation>
      <xs:documentation> Element to specify intent for CAL_Timing precinct
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="method" />
        <xs:element ref="CAL_Timing-registers" />
        <xs:element ref="CAL_Timing-constants" />
        <xs:element ref="CAL_Timing-anc" />
        <xs:choice>
          <xs:element ref="CAL_Timing-param" />
          <xs:element ref="paramsNeeded" />
        </xs:choice>
        <xs:element ref="CAL_Timing-offline" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
<!-- end CAL_Timing -->

<!-- CAL_LAC -->
  <xs:element name="CAL_LAC-registers" >
    <xs:complexType>
      <xs:all >
        <xs:element name="CFE_log_acpt" type="registerType" />
      </xs:all>
    </xs:complexType>
  </xs:element>

  <xs:element name="CAL_LAC-anc" >
    <xs:complexType >
      <xs:all minOccurs="0" >
        <xs:element name="CAL_Ped" type="ancFileType"
                         minOccurs="0" />
        <xs:element name="CAL_LAC" type="ancFileType"
                         minOccurs="0" />
        <xs:element name="CAL_LAC_2_ADC" type="ancFileType"
                         minOccurs="0" />
         <xs:element name="CAL_LACSettings" type="ancFileType"
                         minOccurs="0" />
        <xs:element name="CAL_LACCalib" type="ancFileType"
                         minOccurs="0" />
     </xs:all>
    </xs:complexType>
  </xs:element>
       
  <xs:element name="CAL_LAC-param" >
    <xs:complexType>
      <xs:all  minOccurs="0">
        <xs:element name="latc_CFE_CAL_LAC" type="paramFileType"
                          minOccurs="0" />
        <xs:element name="latc_DFT_CAL_LAC" type="paramFileType" />
      </xs:all>  
      <xs:attributeGroup ref="outfileAttGroup" />
    </xs:complexType>
  </xs:element>

<!--   <xs:element name="CAL_LAC-constants" type="emptyBaseType" />  -->

  <xs:element name="CAL_LAC-constants" >
    <xs:complexType >
      <xs:all minOccurs="0" >
        <xs:element name="LAC_MeV" type="nonnegFloat" />
        <xs:element name="CALIB_MASK" type="xs:string" minOccurs="0"/>
      </xs:all>
    </xs:complexType>
  </xs:element>


  <xs:element name="CAL_LAC-offline" type="noOutfilesType" />

  <xs:element name="CAL_LAC" >
    <xs:annotation>
      <xs:documentation> Element to specify intent for CAL_LAC precinct
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="method" />
        <xs:element ref="CAL_LAC-registers" />
        <xs:element ref="CAL_LAC-constants" />
        <xs:element ref="CAL_LAC-anc" />
        <xs:choice>
          <xs:element ref="CAL_LAC-param" />
          <xs:element ref="paramsNeeded" />
        </xs:choice>
        <xs:element ref="CAL_LAC-offline" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
<!-- end CAL_LAC -->


<!-- start CAL_FLE -->
  <xs:element name="CAL_FLE-registers" >
    <xs:complexType>
      <xs:all >
        <xs:element name="CFE_fle_dac" type="registerType" />
      </xs:all>
    </xs:complexType>
  </xs:element>

  <xs:element name="CAL_FLE-anc" >
    <xs:complexType >
      <xs:all minOccurs="0" >
        <xs:element name="CAL_Ped" type="ancFileType"
                         minOccurs="0" />
        <xs:element name="CAL_FLE" type="ancFileType"
                         minOccurs="0" />
        <xs:element name="CAL_FLE_BIAS" type="ancFileType"
                         minOccurs="0" />
        <xs:element name="CAL_FLE_2_ADC" type="ancFileType"
                         minOccurs="0" />
        <xs:element name="CAL_FLESettings" type="ancFileType"
                         minOccurs="0" />
        <xs:element name="CAL_FLECalib" type="ancFileType"
                         minOccurs="0" />
      </xs:all>
    </xs:complexType>
  </xs:element>
       
  <xs:element name="CAL_FLE-param" >
    <xs:complexType>
      <xs:all  minOccurs="0">
        <xs:element name="latc_CFE_CAL_FLE" type="paramFileType"
                          minOccurs="0" />
        <xs:element name="latc_DFT_CAL_FLE" type="paramFileType" />
      </xs:all>  
      <xs:attributeGroup ref="outfileAttGroup" />
    </xs:complexType>
  </xs:element>

  <xs:element name="CAL_FLE-constants">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="FLE_MeV" type="nonnegFloat" default="100"
                    minOccurs="0" />
        <xs:element name="FLE_MeV_alt" type="nonnegFloat" default="100"
                    minOccurs="0" />
        <xs:element name="ALT_MASK" type="xs:string" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="CAL_FLE-offline" type="noOutfilesType" />

  <xs:element name="CAL_FLE" >
    <xs:annotation>
      <xs:documentation> Element to specify intent for CAL_FLE precinct
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="method" />
        <xs:element ref="CAL_FLE-registers" />
        <xs:element ref="CAL_FLE-constants" />
        <xs:element ref="CAL_FLE-anc" />
        <xs:choice>
          <xs:element ref="CAL_FLE-param" />
          <xs:element ref="paramsNeeded" />
        </xs:choice>
        <xs:element ref="CAL_FLE-offline" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
<!-- end CAL_FLE -->

<!-- start CAL_FHE -->
  <xs:element name="CAL_FHE-registers" >
    <xs:complexType>
      <xs:all >
        <xs:element name="CFE_fhe_dac" type="registerType" />
      </xs:all>
    </xs:complexType>
  </xs:element>

  <xs:element name="CAL_FHE-anc" >
    <xs:complexType >
      <xs:all minOccurs="0" >
        <xs:element name="CAL_Ped" type="ancFileType"
                         minOccurs="0" />
        <xs:element name="CAL_FHE" type="ancFileType"
                         minOccurs="0" />
        <xs:element name="CAL_FHE_2_ADC" type="ancFileType"
                         minOccurs="0" />
        <xs:element name="CAL_FHESettings" type="ancFileType"
                         minOccurs="0" />
        <xs:element name="CAL_FHECalib" type="ancFileType"
                         minOccurs="0" />
      </xs:all>
    </xs:complexType>
  </xs:element>
       
  <xs:element name="CAL_FHE-param" >
    <xs:complexType>
      <xs:all >
        <xs:element name="latc_CFE_CAL_FHE" type="paramFileType"
                          minOccurs="0" />
        <xs:element name="latc_DFT_CAL_FHE" type="paramFileType" />
      </xs:all>  
      <xs:attributeGroup ref="outfileAttGroup" />
    </xs:complexType>
  </xs:element>

  <xs:element name="CAL_FHE-constants">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="FHE_MeV" type="nonnegFloat" default="1000" 
                    minOccurs="0" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="CAL_FHE-offline" type="noOutfilesType" />

  <xs:element name="CAL_FHE" >
    <xs:annotation>
      <xs:documentation> Element to specify intent for CAL_FHE precinct
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="method" />
        <xs:element ref="CAL_FHE-registers" />
        <xs:element ref="CAL_FHE-constants" />
        <xs:element ref="CAL_FHE-anc" />
        <xs:choice>
          <xs:element ref="CAL_FHE-param" />
          <xs:element ref="paramsNeeded" />
        </xs:choice>
        <xs:element ref="CAL_FHE-offline" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
<!-- end CAL_FHE -->

<!-- start CAL_ULD -->
  <xs:element name="CAL_ULD-registers" >
    <xs:complexType>
      <xs:all >
        <xs:element name="CFE_rng_uld_dac" type="registerType" />
      </xs:all>
    </xs:complexType>
  </xs:element>

  <xs:element name="CAL_ULD-anc" >
    <xs:complexType >
      <xs:all minOccurs="0" >
        <xs:element name="CAL_Ped" type="ancFileType"
                         minOccurs="0" />
        <xs:element name="CAL_ULD" type="ancFileType"
                         minOccurs="0" />
        <xs:element name="CAL_ULD_2_ADC" type="ancFileType"
                         minOccurs="0" />
        <xs:element name="CAL_ULDSettings" type="ancFileType"
                         minOccurs="0" />
        <xs:element name="CAL_ULDCalib" type="ancFileType"
                         minOccurs="0" />
     </xs:all>
    </xs:complexType>
  </xs:element>
       
  <xs:element name="CAL_ULD-param" >
    <xs:complexType>
      <xs:all  minOccurs="0">
        <xs:element name="latc_CFE_CAL_ULD" type="paramFileType"
                          minOccurs="0" />
        <xs:element name="latc_DFT_CAL_ULD" type="paramFileType" />
      </xs:all>  
      <xs:attributeGroup ref="outfileAttGroup" />
    </xs:complexType>
  </xs:element>


  <xs:element name="CAL_ULD-constants">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="ULD_Margin" type="nonnegFloat" default="1.5" 
                    minOccurs="0" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>


  <xs:element name="CAL_ULD-offline" type="noOutfilesType" />

  <xs:element name="CAL_ULD" >
    <xs:annotation>
      <xs:documentation> Element to specify intent for CAL_ULD precinct
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="method" />
        <xs:element ref="CAL_ULD-registers" />
        <xs:element ref="CAL_ULD-constants" />
        <xs:element ref="CAL_ULD-anc" />
        <xs:choice>
          <xs:element ref="CAL_ULD-param" />
          <xs:element ref="paramsNeeded" />
        </xs:choice>
        <xs:element ref="CAL_ULD-offline" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
<!-- end CAL_ULD -->


  <!-- Start TKR; TKR_Mode -->
  <xs:element name="TKR_Mode-registers" >
    <xs:complexType>
      <xs:all minOccurs="1">
        <xs:element name="SPT_low" type="registerType" />
        <xs:element name="SPT_high" type="registerType" />
        <xs:element name="TFE_calib_mask" type="registerType" />
        <xs:element name="TDC_injection" type="registerType" />
        <xs:element name="TCC_tcc_configuration" type="registerType" />
        <xs:element name="TCC_input_mask" type="registerType" />
        <xs:element name="TRC_trc_csr" type="registerType" />
      </xs:all>
    </xs:complexType>
  </xs:element>

  <xs:element name="TKR_Mode-param" >
    <xs:complexType>
      <xs:all minOccurs="1" >
        <xs:element name="latc_SPT_TKR_Mode" type="paramFileType"
                          minOccurs="0" />
        <xs:element name="latc_TFE_TKR_Mode" type="paramFileType"
                          minOccurs="0" />
        <xs:element name="latc_TDC_TKR_Mode" type="paramFileType"
                          minOccurs="0" />
        <xs:element name="latc_TCC_TKR_Mode" type="paramFileType"
                          minOccurs="0" />
        <xs:element name="latc_TRC_TKR_Mode" type="paramFileType"
                          minOccurs="0" />
        <xs:element name="latc_DFT_TKR_Mode" type="paramFileType" />
      </xs:all>  
      <xs:attributeGroup ref="outfileAttGroup" />
    </xs:complexType>
  </xs:element>

  <xs:element name="TKR_Mode-anc">
      <xs:complexType >
        <xs:all minOccurs="0" >
          <xs:element name="TKR_ChargeScaleCalibration" type="ancFileType"
                            minOccurs="0" />
        </xs:all>
      </xs:complexType >
  </xs:element>

  <xs:element name="TKR_Mode-constants">
    <xs:complexType>
      <xs:all minOccurs="0">
        <xs:element name="TRC_buffers" maxOccurs="1">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="trc_config" minOccurs="0" maxOccurs="9" >   
                <xs:complexType>     
                  <xs:attributeGroup ref="trcGroup" />
                </xs:complexType>
              </xs:element>
            </xs:sequence>          
          </xs:complexType>
        </xs:element>
      </xs:all>
    </xs:complexType>  
  </xs:element>

  <xs:element name="TKR_Mode-offline" type="noOutfilesType" />

  <xs:element name="TKR_Mode" >
    <xs:annotation>
      <xs:documentation> Element to specify intent for TKR_Mode precinct
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="method" />
        <xs:element ref="TKR_Mode-registers" />
        <xs:element ref="TKR_Mode-constants" />
        <xs:element ref="TKR_Mode-anc" />
        <xs:choice>
          <xs:element ref="TKR_Mode-param" />
          <xs:element ref="paramsNeeded" />
        </xs:choice>
        <xs:element ref="TKR_Mode-offline" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- end TKR_Mode --> 

  <!-- start TKR_Timing -->
  <xs:element name="TKR_Timing-registers" >
    <xs:complexType>
      <xs:all >
        <xs:element name="TCC_tcc_trg_align" type="registerType" />
      </xs:all>
    </xs:complexType>
  </xs:element>

  <xs:element name="TKR_Timing-anc" >
    <xs:complexType >
      <xs:all minOccurs="0" >
        <xs:element name="TKR_trg_alignment" type="ancFileType"
                         minOccurs="0" />
        <xs:element name="TKR_TACK_delay" type="ancFileType"
                         minOccurs="0" />
      </xs:all>
    </xs:complexType >
  </xs:element>

  <xs:element name="TKR_Timing-param" >
    <xs:complexType>
      <xs:all  minOccurs="0">
        <xs:element name="latc_TCC_TKR_Timing" type="paramFileType"
                          minOccurs="0" />
        <xs:element name="latc_DFT_TKR_Timing" type="paramFileType" />
      </xs:all>  
      <xs:attributeGroup ref="outfileAttGroup" />
    </xs:complexType>
  </xs:element>

  <xs:element name="TKR_Timing-constants" type="emptyBaseType" />

  <xs:element name="TKR_Timing-offline" type="noOutfilesType" />

  <xs:element name="TKR_Timing" >
    <xs:annotation>
      <xs:documentation> Element to specify intent for TKR_Timing precinct
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="method" />
        <xs:element ref="TKR_Timing-registers" />
        <xs:element ref="TKR_Timing-constants" />
        <xs:element ref="TKR_Timing-anc" />
        <xs:choice>
          <xs:element ref="TKR_Timing-param" />
          <xs:element ref="paramsNeeded" />
        </xs:choice>
        <xs:element ref="TKR_Timing-offline" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- end TKR_Timing -->

  <!-- Start TKR_Strips -->
  <xs:element name="TKR_Strips-registers" >
    <xs:complexType>
      <xs:all >
        <xs:element name="TFE_trig_enable" type="registerType" />
        <xs:element name="TFE_data_mask" type="registerType" />
      </xs:all>
    </xs:complexType>
  </xs:element>

  <xs:element name="TKR_Strips-anc" >
    <xs:complexType >
      <xs:all minOccurs="0" >
<!--        <xs:element name="TKR_Strips_Settings" type="ancFileType"
                         minOccurs="0" />  -->
        <xs:element name="TKR_HotStripsCalibration" type="ancFileType"
                         minOccurs="0" />
      </xs:all>
    </xs:complexType >
  </xs:element>

  <xs:element name="TKR_Strips-param" >
    <xs:complexType>
      <xs:all  minOccurs="0">
        <xs:element name="latc_TFE_TKR_Strips" type="paramFileType"
                          minOccurs="0" />
        <xs:element name="latc_DFT_TKR_Strips" type="paramFileType" />
      </xs:all>  
      <xs:attributeGroup ref="outfileAttGroup" />
    </xs:complexType>
  </xs:element>

  <xs:element name="TKR_Strips-constants" type="emptyBaseType" />

  <xs:element name="TKR_Strips-offline" type="noOutfilesType" />

  <xs:element name="TKR_Strips" >
    <xs:annotation>
      <xs:documentation> Element to specify intent for TKR_Strips precinct
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="method" />
        <xs:element ref="TKR_Strips-registers" />
        <xs:element ref="TKR_Strips-constants" />
        <xs:element ref="TKR_Strips-anc" />
        <xs:choice>
          <xs:element ref="TKR_Strips-param" />
          <xs:element ref="paramsNeeded" />
        </xs:choice>
        <xs:element ref="TKR_Strips-offline" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- end TKR_Strips -->

  <!-- Start TKR_Thresh -->
  <xs:element name="TKR_Thresh-registers" >
    <xs:complexType>
      <xs:all >
        <xs:element name="TDC_threshold" type="registerType" />
      </xs:all>
    </xs:complexType>
  </xs:element>

  <xs:element name="TKR_Thresh-anc" >
    <xs:complexType >
      <xs:all minOccurs="0" >
        <xs:element name="TKR_ThresholdSettings" type="ancFileType"
                          minOccurs="0" />
<!--        <xs:element name="TKR_Thresh_Settings" type="ancFileType" -->
<!--                          minOccurs="0" />    -->
      </xs:all>
    </xs:complexType >
  </xs:element>

  <xs:element name="TKR_Thresh-param" >
    <xs:complexType>
      <xs:all  minOccurs="0">
        <xs:element name="latc_TDC_TKR_Thresh" type="paramFileType"
                          minOccurs="0" />
        <xs:element name="latc_DFT_TKR_Thresh" type="paramFileType" />
      </xs:all>  
      <xs:attributeGroup ref="outfileAttGroup" />
    </xs:complexType>
  </xs:element>

  <xs:element name="TKR_Thresh-constants" type="emptyBaseType" />

  <xs:element name="TKR_Thresh-offline" type="noOutfilesType" />

  <xs:element name="TKR_Thresh" >
    <xs:annotation>
      <xs:documentation> Element to specify intent for TKR_Thresh precinct
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="method" />
        <xs:element ref="TKR_Thresh-registers" />
        <xs:element ref="TKR_Thresh-constants" />
        <xs:element ref="TKR_Thresh-anc" />
        <xs:choice>
          <xs:element ref="TKR_Thresh-param" />
          <xs:element ref="paramsNeeded" />
        </xs:choice>
        <xs:element ref="TKR_Thresh-offline" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- End TKR_Thresh -->

<!-- TRG_GEM -->
  <xs:complexType name="GEM_conditionsType">
    <xs:sequence>
      <xs:element name="rule" maxOccurs="19">
        <xs:complexType>
          <xs:sequence/>
          <xs:attributeGroup ref="ruleGroup" />
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="GEM_engineType">
    <xs:sequence>
      <xs:element name="engine" maxOccurs="16">
        <xs:complexType>
          <xs:sequence />
          <xs:attributeGroup ref="engineGroup" />
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="GEM_tilesType">
    <xs:all minOccurs="0">
      <xs:element name="enableAll" minOccurs="0">        
      </xs:element>
      <xs:element name="exceptTileList" minOccurs="0">
      </xs:element>
    </xs:all>
  </xs:complexType>

  <xs:complexType name="GEM_towersType">
    <xs:all minOccurs="1">
      <xs:element name="tkr_tower_mask" type="regValueType"/>        
      <xs:element name="clo_tower_mask" type="regValueType"/>
      <xs:element name="chi_tower_mask" type="regValueType"/>
    </xs:all>
  </xs:complexType>

  <xs:element name="TRG_GEM-registers" >
    <xs:complexType>
      <xs:all minOccurs="0">
        <xs:element name="GEM_conditions" type="GEM_conditionsType" 
                    minOccurs="0"/>
        <xs:element name="GEM_configuration" type="registerType" 
                    minOccurs="0"/>
        <xs:element name="GEM_periodic_mode" type="registerType" 
                    minOccurs="0"/>
        <xs:element name="GEM_periodic_rate" type="registerType" 
                    minOccurs="0"/>
        <xs:element name="GEM_window_open_mask" type="registerType" 
	            minOccurs="0"/>
        <xs:element name="GEM_periodic_limit" type="registerType" 
                    minOccurs="0"/>
        <xs:element name="GEM_window_width" type="registerType" minOccurs="0"/>
         <xs:element name="GEM_acd_cno" type="registerType" minOccurs="0"/>
        <xs:element name="GEM_external_trg" type="registerType" minOccurs="0"/>
        <xs:element name="GEM_tower_busy" type="registerType" 
                    minOccurs="0"/>
        <xs:element name="GEM_engine" type="GEM_engineType" minOccurs="0"/>
        <xs:element name="GEM_tiles" type="GEM_tilesType" minOccurs="0"/>
        <xs:element name="GEM_towers" type="GEM_towersType" minOccurs="0"/>
     </xs:all>
    </xs:complexType>
  </xs:element>

  <xs:element name="TRG_GEM-param" >
    <xs:complexType>
      <xs:all minOccurs="1" >
        <xs:element name="latc_DFT_TRG_GEM" type="paramFileType" />
        <xs:element name="latc_GEM_TRG_GEM" type="paramFileType" />
      </xs:all>  
      <xs:attributeGroup ref="outfileAttGroup" />
    </xs:complexType>
  </xs:element>

  <xs:element name="TRG_GEM-anc" type="emptyBaseType" />

  <xs:element name="TRG_GEM-constants" type="emptyBaseType" />

  <xs:element name="TRG_GEM-offline" type="noOutfilesType" />

  <xs:element name="TRG_GEM" >
    <xs:annotation>
      <xs:documentation> Element to specify intent for TRG_GEM precinct
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="method" />
        <xs:element ref="TRG_GEM-registers" />
        <xs:element ref="TRG_GEM-constants" />
        <xs:element ref="TRG_GEM-anc" />
        <xs:choice>
          <xs:element ref="TRG_GEM-param" />
          <xs:element ref="paramsNeeded" />
        </xs:choice>
        <xs:element ref="TRG_GEM-offline" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
<!-- end TRG_GEM -->

<!-- TRG_ROI -->
  <xs:element name="TRG_ROI-registers" >
    <xs:complexType>
      <xs:all minOccurs="1" >
        <xs:element name="GEM_r" >
          <xs:complexType>
            <xs:sequence>
              <xs:element name="roiSet" type="roiSetType" minOccurs="0" maxOccurs="16" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:all>
    </xs:complexType>
  </xs:element>

  <xs:element name="TRG_ROI-param" >
    <xs:complexType>
      <xs:all minOccurs="1" >
        <xs:element name="latc_GEM_TRG_ROI" type="paramFileType" />
      </xs:all>  
      <xs:attributeGroup ref="outfileAttGroup" />
    </xs:complexType>
  </xs:element>

  <xs:element name="TRG_ROI-anc" type="emptyBaseType" />

  <xs:element name="TRG_ROI-constants" type="emptyBaseType" />

  <xs:element name="TRG_ROI-offline" type="noOutfilesType" />

  <xs:element name="TRG_ROI" >
    <xs:annotation>
      <xs:documentation> Element to specify intent for TRG_ROI precinct
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="method" />
        <xs:element ref="TRG_ROI-registers" />
        <xs:element ref="TRG_ROI-constants" />
        <xs:element ref="TRG_ROI-anc" />
        <xs:choice>
          <xs:element ref="TRG_ROI-param" />
          <xs:element ref="paramsNeeded" />
        </xs:choice>
        <xs:element ref="TRG_ROI-offline" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

<!-- end TRG_ROI -->

  <!-- Start GNL; GNL_Mode -->
  <xs:element name="GNL_Mode-registers" >
    <xs:complexType>
      <xs:all minOccurs="1">
        <xs:element name="AEM_aem_configuration" type="registerType" />
        <xs:element name="TEM_data_masks" type="registerType" />
        <xs:element name="TIC_cal_in_mask" type="registerType" />
        <xs:element name="TIC_tkr_out_mask" type="registerType" />
        <xs:element name="TIC_tkr_layer_enable_0" type="registerType" />
        <xs:element name="TIC_tkr_layer_enable_1" type="registerType" />
      </xs:all>
    </xs:complexType>
  </xs:element>

  <xs:element name="GNL_Mode-param" >
    <xs:complexType>
      <xs:all minOccurs="1" >
        <xs:element name="latc_TIC_GNL_Mode" type="paramFileType"
                          minOccurs="0" />
        <xs:element name="latc_TEM_GNL_Mode" type="paramFileType"
                          minOccurs="0" />
        <xs:element name="latc_AEM_GNL_Mode" type="paramFileType" />
        <xs:element name="latc_DFT_GNL_Mode" type="paramFileType" />
      </xs:all>  
      <xs:attributeGroup ref="outfileAttGroup" />
    </xs:complexType>
  </xs:element>

  <xs:element name="GNL_Mode-anc" type="emptyBaseType" />
  <xs:element name="GNL_Mode-constants" type="emptyBaseType" />
  <xs:element name="GNL_Mode-offline" type="noOutfilesType" />

  <xs:element name="GNL_Mode" >
    <xs:annotation>
      <xs:documentation> Element to specify intent for GNL_Mode precinct
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="method" />
        <xs:element ref="GNL_Mode-registers" />
        <xs:element ref="GNL_Mode-constants" />
        <xs:element ref="GNL_Mode-anc" />
        <xs:choice>
          <xs:element ref="GNL_Mode-param" />
          <xs:element ref="paramsNeeded" />
        </xs:choice>
        <xs:element ref="GNL_Mode-offline" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- end GNL_Mode --> 

  <!-- start GNL_Timing -->
  <xs:element name="GNL_Timing-registers" >
    <xs:complexType>
      <xs:all >
        <xs:element name="AEM_trgseq" type="registerType" />
        <xs:element name="TEM_cal_trgseq" type="registerType" />
        <xs:element name="TEM_tkr_trgseq" type="registerType" />
      </xs:all>
    </xs:complexType>
  </xs:element>

  <xs:element name="GNL_Timing-anc" >
    <xs:complexType >
      <xs:all minOccurs="0" >
        <xs:element name="TKR_TACK_delay" type="ancFileType"
                         minOccurs="0" />
      </xs:all>
    </xs:complexType >
  </xs:element>

  <xs:element name="GNL_Timing-param" >
    <xs:complexType>
      <xs:all  minOccurs="0">
        <xs:element name="latc_TEM_GNL_Timing" type="paramFileType"
                          minOccurs="0" />
        <xs:element name="latc_AEM_GNL_Timing" type="paramFileType" />
        <xs:element name="latc_DFT_GNL_Timing" type="paramFileType" />
      </xs:all>  
      <xs:attributeGroup ref="outfileAttGroup" />
    </xs:complexType>
  </xs:element>

  <xs:element name="GNL_Timing-constants" type="emptyBaseType" />

  <xs:element name="GNL_Timing-offline" type="noOutfilesType" />

  <xs:element name="GNL_Timing" >
    <xs:annotation>
      <xs:documentation> Element to specify intent for GNL_Timing precinct
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="method" />
        <xs:element ref="GNL_Timing-registers" />
        <xs:element ref="GNL_Timing-constants" />
        <xs:element ref="GNL_Timing-anc" />
        <xs:choice>
          <xs:element ref="GNL_Timing-param" />
          <xs:element ref="paramsNeeded" />
        </xs:choice>
        <xs:element ref="GNL_Timing-offline" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- end GNL_Timing -->


  <!-- start GNL_Ignore -->
  <xs:element name="GNL_Ignore-registers" type="emptyBaseType" />

  <xs:element name="GNL_Ignore-anc" >
    <xs:complexType >
      <xs:all minOccurs="0" >
        <xs:element name="GNL_IgnoreSettings" type="ancFileType"
                         minOccurs="0" />
      </xs:all>
    </xs:complexType >
  </xs:element>

  <xs:element name="GNL_Ignore-param" >
    <xs:complexType>
      <xs:all  minOccurs="0">
        <xs:element name="latc_IGN_GNL_Ignore" type="paramFileType"/>
       </xs:all>  
      <xs:attributeGroup ref="outfileAttGroup" />
    </xs:complexType>
  </xs:element>

  <xs:element name="GNL_Ignore-constants" type="emptyBaseType" />

  <xs:element name="GNL_Ignore-offline" type="noOutfilesType" />

  <xs:element name="GNL_Ignore" >
    <xs:annotation>
      <xs:documentation> Element to specify intent for GNL_Ignore precinct
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="method" />
        <xs:element ref="GNL_Ignore-registers" />
        <xs:element ref="GNL_Ignore-constants" />
        <xs:element ref="GNL_Ignore-anc" />
        <xs:choice>
          <xs:element ref="GNL_Ignore-param" />
          <xs:element ref="paramsNeeded" />
        </xs:choice>
        <xs:element ref="GNL_Ignore-offline" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- end GNL_Ignore -->

  <!-- start Filter_Associate -->

  <xs:complexType name="filterHandlerType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="master" type="xs:string" use="required"/>
        <xs:attribute name="active" type="xs:string"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="lpaModeType">
    <xs:sequence>
      <xs:element name="PASS" type="filterHandlerType"/>
      <xs:element name="GAMMA" type="filterHandlerType"/>
      <xs:element name="ASC" type="filterHandlerType"/>
      <xs:element name="MIP" type="filterHandlerType"/>
      <xs:element name="HIP" type="filterHandlerType"/>
      <xs:element name="DGN" type="filterHandlerType"/>
    </xs:sequence>
    <xs:attribute name="modes" type="xs:string" use="required"/>
  </xs:complexType>

  <xs:complexType name="associationsType">
    <xs:sequence>
      <xs:element name="LPA_Mode" type="lpaModeType" minOccurs="1"/>
    </xs:sequence>
    <xs:attribute name="LPA_DB" type="xs:Name" use="required"/>
  </xs:complexType>

  <xs:element name="Filter_Associate-registers" >
    <xs:complexType>
      <xs:all minOccurs="0" maxOccurs="1">
        <xs:element name="FSW_Associations" type="associationsType"/>
      </xs:all>
    </xs:complexType>
  </xs:element>

  <xs:element name="Filter_Associate-anc" >
    <xs:complexType >
      <xs:all minOccurs="0" >
        <xs:element name="Filter_AssociateXml" type="ancFileType"
                         minOccurs="0" />
      </xs:all>
    </xs:complexType >
  </xs:element>

  <xs:element name="Filter_Associate-param" >
    <xs:complexType>
      <xs:all  minOccurs="0">
        <xs:element name="fsw_FSW_Filter_Associate" type="paramFileType"/>
       </xs:all>  
      <xs:attributeGroup ref="outfileAttGroup" />
    </xs:complexType>
  </xs:element>

  <xs:element name="Filter_Associate-constants" type="emptyBaseType" />

  <xs:element name="Filter_Associate-offline" type="noOutfilesType" />

  <xs:element name="Filter_Associate" >
    <xs:annotation>
      <xs:documentation> Element to specify intent for Filter_Associate precinct
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="method" />
        <xs:element ref="Filter_Associate-registers" />
        <xs:element ref="Filter_Associate-constants" />
        <xs:element ref="Filter_Associate-anc" />
        <xs:choice>
          <xs:element ref="Filter_Associate-param" />
          <xs:element ref="paramsNeeded" />
        </xs:choice>
        <xs:element ref="Filter_Associate-offline" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- end Filter_Associate -->


<!-- Generic stuff for the lci precincts: ACD_LCI, CAL_LCI, TKR_LCI -->
   <xs:element name="script" type="xs:Name" />

   <xs:simpleType name="iterableType" >
     <xs:restriction base="xs:string">
       <xs:pattern value="LATC" />
       <xs:pattern value="ALL" />
       <xs:pattern value="FOREACH" />
       <xs:pattern value="LOW" />
       <xs:pattern value="HIGH" />
       <xs:pattern value="OFF" />
       <xs:pattern value="ON" />
       <xs:pattern value="[1-9][0-9]*" />
       <xs:pattern value="0" />
     </xs:restriction>
   </xs:simpleType>

   <!-- or try this: -->
   <xs:simpleType name="iterType" >
     <xs:union memberTypes="xs:nonNegativeInteger">
       <xs:simpleType>
         <xs:restriction base="xs:Name" >
           <xs:enumeration value="LATC" />
           <xs:enumeration value="ALL" />
           <xs:enumeration value="OFF" />
           <xs:enumeration value="ON" />
           <xs:enumeration value="LOW" />
           <xs:enumeration value="HIGH" />
           <xs:enumeration value="FOREACH" />
         </xs:restriction>
       </xs:simpleType>
     </xs:union>
   </xs:simpleType>

  <xs:simpleType name="on_off" >
    <xs:restriction base="xs:Name" >
      <xs:enumeration value="OFF" />
      <xs:enumeration value="ON" />
    </xs:restriction>
  </xs:simpleType>

  <xs:element name="lci_parameters" >
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="emptyBaseType">
          <xs:attribute name="number" use="required" 
                        type="xs:nonNegativeInteger" />
          <xs:attribute name="period" use="required" 
                        type="xs:nonNegativeInteger" />
          <xs:attribute name="latc_delay" use="required" 
                        type="xs:nonNegativeInteger" />
          <xs:attribute name="delay" use="required" 
                        type="xs:nonNegativeInteger" />
          <xs:attribute name="strobe" use="required" type="on_off" />
          <xs:attribute name="zero_suppress" use="required" type="on_off" />
        </xs:extension>
       </xs:complexContent>
    </xs:complexType>
  </xs:element>

<!-- ci dictionaries are a special kind of ancillary file -->
  <xs:complexType name="ciDictType" >
    <xs:simpleContent >
      <xs:extension base="ancFileType" >
        <xs:attribute name="dict_key" type="xs:Name" use="required" />
        <xs:attribute name="step_size" 
                      type="xs:positiveInteger" default="1"  />
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <!-- arbitrary number of fields (at least 1) separated by ":" Contents
       of field may be either the string LATC or a non-negative integer -->
  <xs:simpleType name="listLoopType" >
    <xs:restriction base="xs:token" >
      <xs:pattern 
        value="([1-9][0-9]*|0|LATC|LOW|HIGH|ON|OFF)(:(LATC|LOW|HIGH|ON|OFF|[1-9][0-9]*|0))*" />
    </xs:restriction>
  </xs:simpleType>


<!-- Three fields separated by : First two are nonneg. integer; third
     may be any integer -->
  <xs:simpleType name="rangeLoopType" >
    <xs:restriction base = "xs:token" >
      <xs:pattern value="(([1-9][0-9]*|0):){2}(-?[1-9][0-9]*|0)" />
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="ACD_iterableName">
    <xs:restriction base="xs:Name" >
      <xs:enumeration value="ACD_inject" />
      <xs:enumeration value="ACD_pha" />
      <xs:enumeration value="ACD_veto" />
      <xs:enumeration value="ACD_bias" />
      <xs:enumeration value="ACD_hold_delay" />
      <xs:enumeration value="ACD_hitmap_delay" />
      <xs:enumeration value="ACD_range" />
      <xs:enumeration value="ACD_veto_vernier" />
      <xs:enumeration value="ACD_hld" />
      <xs:enumeration value="ACD_channel" />
    </xs:restriction>
  </xs:simpleType>

  <xs:element name="ACD_listLoop">
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="listLoopType" >
          <xs:attribute name="param" use="required" type="ACD_iterableName" />
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="ACD_rangeLoop">
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="rangeLoopType" >
          <xs:attribute name="param" use="required" type="ACD_iterableName" />
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:simpleType name="CAL_iterableName">
    <xs:restriction base="xs:Name" >
      <xs:enumeration value="CAL_auto_range" />
      <xs:enumeration value="CAL_first_range" />
      <xs:enumeration value="CAL_column" />
      <xs:enumeration value="CAL_trigger.low" />
      <xs:enumeration value="CAL_trigger.high" />
      <xs:enumeration value="CAL_tack" />
      <xs:enumeration value="CAL_gain.low" />
      <xs:enumeration value="CAL_gain.high" />
      <xs:enumeration value="CAL_range_enab.low" />
      <xs:enumeration value="CAL_range_enab.high" />
      <xs:enumeration value="CAL_range_uld" />
      <xs:enumeration value="CAL_log_accept" />
      <xs:enumeration value="CAL_trig_enab.low" />
      <xs:enumeration value="CAL_trig_enab.high" />
      <xs:enumeration value="CAL_calib_enab.low" />
      <xs:enumeration value="CAL_calib_enab.high" />
      <xs:enumeration value="CAL_calib_gain" />
      <xs:enumeration value="CAL_inject" />
    </xs:restriction>
  </xs:simpleType>

  <xs:element name="CAL_listLoop">
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="listLoopType" >
          <xs:attribute name="param" use="required" type="CAL_iterableName" />
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="CAL_rangeLoop">
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="rangeLoopType" >
          <xs:attribute name="param" use="required" type="CAL_iterableName" />
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:simpleType name="TKR_iterableName">
    <xs:restriction base="xs:Name" >
      <xs:enumeration value="TKR_split.low" />
      <xs:enumeration value="TKR_split.high" />
      <xs:enumeration value="TKR_tack" />
      <xs:enumeration value="TKR_channel" />
      <xs:enumeration value="TKR_threshold" />
      <xs:enumeration value="TKR_inject" />
    </xs:restriction>
  </xs:simpleType>

  <xs:element name="TKR_listLoop">
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="listLoopType" >
          <xs:attribute name="param" use="required" type="TKR_iterableName" />
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="TKR_rangeLoop">
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="rangeLoopType" >
          <xs:attribute name="param" use="required" type="TKR_iterableName" />
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="ACD_iterables" >
    <xs:complexType >
      <xs:sequence>
        <xs:element name="ACD_inject" type="iterableType" default="LATC" 
                    minOccurs="0" />
        <xs:element name="ACD_pha" type="iterableType" default="LATC" 
                    minOccurs="0"/>
        <xs:element name="ACD_veto" type="iterableType" default="LATC" 
                    minOccurs="0" />
        <xs:element name="ACD_bias" type="iterableType" default="LATC" 
                    minOccurs="0"/>
        <xs:element name="ACD_hold_delay" type="iterableType" default="LATC" 
                    minOccurs="0"/>
        <xs:element name="ACD_hitmap_delay" type="iterableType" 
                    default="LATC" minOccurs="0"/>
        <xs:element name="ACD_range" type="iterableType" 
                    default="LATC" minOccurs="0"/>
        <xs:element name="ACD_veto_vernier" type="iterableType" 
                    default="LATC" minOccurs="0"/>
        <xs:element name="ACD_hld" type="iterableType" 
                    default="LATC" minOccurs="0"/>
        <xs:element name="ACD_channel" type="iterableType" 
                    default="LATC" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="CAL_iterables" >
    <xs:complexType >
      <xs:sequence>
        <xs:element name="CAL_tack" type="iterableType" default="LATC" 
                    minOccurs="0" />
        <xs:element name="CAL_trigger.low" type="iterableType" default="LATC" 
                    minOccurs="0" />
        <xs:element name="CAL_trigger.high" type="iterableType" default="LATC" 
                    minOccurs="0" />
        <xs:element name="CAL_range_uld" type="iterableType" default="LATC" 
                    minOccurs="0"/>
        <xs:element name="CAL_log_accept" type="iterableType" default="LATC" 
                    minOccurs="0"/>
        <xs:element name="CAL_gain.low" type="iterableType" default="LATC" 
                    minOccurs="0" />
        <xs:element name="CAL_gain.high" type="iterableType" default="LATC" 
                    minOccurs="0" />
        <xs:element name="CAL_range_enab.low" type="iterableType" 
                    default="LATC" minOccurs="0" />
        <xs:element name="CAL_range_enab.high" type="iterableType" 
                    default="LATC" minOccurs="0" />
        <xs:element name="CAL_auto_range" type="iterableType" default="LATC" 
                    minOccurs="0" />
        <xs:element name="CAL_first_range" type="iterableType" default="LATC" 
                    minOccurs="0" />
        <xs:element name="CAL_trig_enab.low" type="iterableType" 
                    default="LATC" minOccurs="0" />
        <xs:element name="CAL_trig_enab.high" type="iterableType" 
                    default="LATC" minOccurs="0" />
        <xs:element name="CAL_calib_enab.low" type="iterableType" 
                    default="LATC" minOccurs="0" />
        <xs:element name="CAL_calib_enab.high" type="iterableType" 
                    default="LATC" minOccurs="0" />
        <xs:element name="CAL_calib_gain" type="iterableType" 
                    default="LATC" minOccurs="0"/>
        <xs:element name="CAL_column" type="iterableType" default="LATC" 
                    minOccurs="0" />
        <xs:element name="CAL_inject" type="iterableType" default="LATC" 
                    minOccurs="0" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="TKR_iterables" >
    <xs:complexType >
      <xs:sequence>
        <xs:element name="TKR_split.low" type="iterableType" 
                    default="LATC" minOccurs="0"/>
        <xs:element name="TKR_split.high" type="iterableType" 
                    default="LATC" minOccurs="0"/>
        <xs:element name="TKR_tack" type="iterableType" 
                    default="LATC" minOccurs="0" />
        <xs:element name="TKR_channel" type="iterableType" 
                    default="LATC" minOccurs="0" />
        <xs:element name="TKR_threshold" type="iterableType" 
                    default="LATC" minOccurs="0" />
        <xs:element name="TKR_inject" type="iterableType" 
                    default="LATC" minOccurs="0" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="ACD_rangeDict" >
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:Name">
          <xs:attribute name='param' use='required' type='ACD_iterableName' />
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="CAL_rangeDict" >
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:Name">
          <xs:attribute name='param' use='required' type='CAL_iterableName' />
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="CAL_beginEndDict" >
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:Name">
          <xs:attribute name='param' use='required' type='CAL_iterableName' />
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="TKR_rangeDict" >
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:Name">
          <xs:attribute name='param' use='required' type='TKR_iterableName' />
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>


  <xs:element name="ACD_LCI" >
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="script" />
        <xs:element ref="ACD_iterables" />
        <xs:element ref="ACD_LCI-anc" />
        <xs:element ref="ACD_lci_loop" maxOccurs="unbounded" />
        <xs:choice>
          <xs:element ref="ACD_LCI-param" />
          <xs:element ref="paramsNeeded" />
        </xs:choice>

      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="CAL_LCI" >
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="script" />
        <xs:element ref="CAL_iterables" />
        <xs:element ref="CAL_LCI-anc" />
        <xs:element ref="CAL_lci_loop" maxOccurs="unbounded" />
        <xs:choice>
          <xs:element ref="CAL_LCI-param" />
          <xs:element ref="paramsNeeded" />
        </xs:choice>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="TKR_LCI" >
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="script" />
        <xs:element ref="TKR_iterables" />
        <xs:element ref="TKR_LCI-anc" />
        <xs:element ref="TKR_lci_loop" maxOccurs="unbounded" />
        <xs:choice>
          <xs:element ref="TKR_LCI-param" />
          <xs:element ref="paramsNeeded" />
        </xs:choice>
      </xs:sequence>
    </xs:complexType>
  </xs:element>


  <xs:element name="ACD_LCI-anc" >
    <xs:complexType>
      <xs:sequence minOccurs="0" >
        <xs:element name="acd_ACD_veto_dict" type="ciDictType" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="CAL_LCI-anc" >
    <xs:complexType>
      <xs:sequence minOccurs="0" >
        <xs:element name="cal_CAL_rng_dict" type="ciDictType" minOccurs="0" 
                    maxOccurs="4"/>
        <xs:element name="cal_CAL_trg_dict" type="ciDictType" minOccurs="0" 
                    maxOccurs="4"/>
        <xs:element name="cal_CAL_supp_dict" type="ciDictType" minOccurs="0" 
                    maxOccurs="4"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="TKR_LCI-anc">
    <xs:complexType>
      <xs:sequence minOccurs="0" >
      </xs:sequence>
    </xs:complexType>
  </xs:element>


  <xs:element name="ACD_LCI-param" >
    <xs:complexType>
      <xs:all minOccurs="0" >
        <xs:element name="lci_ACD" type="paramFileType" />
      </xs:all>
    </xs:complexType>
  </xs:element>

  <xs:element name="CAL_LCI-param" >
    <xs:complexType>
      <xs:all minOccurs="0" >
        <xs:element name="lci_CAL" type="paramFileType" />
      </xs:all>
    </xs:complexType>
  </xs:element>

  <xs:element name="TKR_LCI-param" >
    <xs:complexType>
      <xs:all minOccurs="0" >
        <xs:element name="lci_TKR" type="paramFileType" />
      </xs:all>
    </xs:complexType>
  </xs:element>


  <xs:element name="ACD_lci_loop" >
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="ACD_rangeLoop"  minOccurs="0" />
        <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="ACD_lci_loop" />
          <xs:element ref="ACD_listLoop" />
        </xs:choice>
        <xs:element ref="ACD_rangeDict" minOccurs="0"/>
        <xs:element ref="lci_parameters" minOccurs="0"/>
      </xs:sequence>
      <xs:attribute name="loop_id" type="xs:Name" use="required" />
    </xs:complexType>
  </xs:element>
    
  <xs:element name="CAL_lci_loop" >
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="CAL_rangeLoop"  minOccurs="0" />
        <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="CAL_lci_loop" />
          <xs:element ref="CAL_listLoop" />
        </xs:choice>
        <xs:element ref="CAL_rangeDict" minOccurs="0"/>
        <xs:element ref="CAL_beginEndDict" minOccurs="0"/>
        <xs:element ref="lci_parameters" minOccurs="0"/>
      </xs:sequence>
      <xs:attribute name="loop_id" type="xs:Name" use="required" />
    </xs:complexType>
  </xs:element>
    
  <xs:element name="TKR_lci_loop" >
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="TKR_rangeLoop"  minOccurs="0" />
        <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="TKR_lci_loop" />
          <xs:element ref="TKR_listLoop" />
        </xs:choice>
        <xs:element ref="TKR_rangeDict" minOccurs="0"/>
        <xs:element ref="lci_parameters" minOccurs="0"/>
      </xs:sequence>
      <xs:attribute name="loop_id" type="xs:Name" use="required" />
    </xs:complexType>
  </xs:element>
    


 <xs:element name="PRECINCT_INTENT">
    <xs:annotation>
      <xs:documentation> Root element for specifying
         LAT configuration intent for a precinct
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice>
        <xs:element ref="ACD_Mode"  />
        <xs:element ref="ACD_Timing"  />
        <xs:element ref="ACD_Bias"  />
        <xs:element ref="ACD_Hld"  />
        <xs:element ref="ACD_PHA"  />
        <xs:element ref="ACD_Veto"  />

        <xs:element ref="CAL_Mode"  />
        <xs:element ref="CAL_Timing"  />
        <xs:element ref="CAL_LAC"  />
        <xs:element ref="CAL_FLE"  />
        <xs:element ref="CAL_FHE"  />    
        <xs:element ref="CAL_ULD"  /> 

        <xs:element ref="TKR_Mode"  />
        <xs:element ref="TKR_Timing"  />
        <xs:element ref="TKR_Strips"  />
        <xs:element ref="TKR_Thresh"  />

        <xs:element ref="TRG_GEM"  />
        <xs:element ref="TRG_ROI"  />

        <xs:element ref="GNL_Mode"  />
        <xs:element ref="GNL_Timing"  />
        <xs:element ref="GNL_Ignore" />

        <xs:element ref="Filter_Associate" />

        <xs:element ref="ACD_LCI" />
        <xs:element ref="CAL_LCI" />
        <xs:element ref="TKR_LCI" />
      </xs:choice>
    </xs:complexType>

    <xs:unique name="ACD_Mode-anc-key" >
      <xs:selector xpath="ACD_Mode/*/*" /> 
      <xs:field xpath="@nickname" />
    </xs:unique>

    <xs:keyref name="ACD_Mode-anc-keyref" refer="ACD_Mode-anc-key" >
      <xs:selector xpath="ACD_Mode/ACD_Mode-param/*/ancRef" />
      <xs:field   xpath="@refTo" />
    </xs:keyref>

    <xs:unique name="ACD_Bias-anc-key" >
      <xs:selector xpath="ACD_Bias/*/*" /> 
      <xs:field xpath="@nickname" />
    </xs:unique>

    <xs:keyref name="ACD_Bias-anc-keyref" refer="ACD_Bias-anc-key" >
      <xs:selector xpath="ACD_Bias/ACD_Bias-param/*/ancRef" />
      <xs:field   xpath="@refTo" />
    </xs:keyref>

    <xs:unique name="ACD_Hld-anc-key" >
      <xs:selector xpath="ACD_Hld/*/*" /> 
      <xs:field xpath="@nickname" />
    </xs:unique>

    <xs:keyref name="ACD_Hld-anc-keyref" refer="ACD_Hld-anc-key" >
      <xs:selector xpath="ACD_Hld/ACD_Hld-param/*/ancRef" />
      <xs:field   xpath="@refTo" />
    </xs:keyref>

    <xs:unique name="ACD_PHA-anc-key" >
      <xs:selector xpath="ACD_PHA/*/*" /> 
      <xs:field xpath="@nickname" />
    </xs:unique>

    <xs:keyref name="ACD_PHA-anc-keyref" refer="ACD_PHA-anc-key" >
      <xs:selector xpath="ACD_PHA/ACD_PHA-param/*/ancRef" />
      <xs:field   xpath="@refTo" />
    </xs:keyref>

    <xs:unique name="ACD_Veto-anc-key" >
      <xs:selector xpath="ACD_Veto/*/*" /> 
      <xs:field xpath="@nickname" />
    </xs:unique>

    <xs:keyref name="ACD_Veto-anc-keyref" refer="ACD_Veto-anc-key" >
      <xs:selector xpath="ACD_Veto/ACD_Veto-param/*/ancRef" />
      <xs:field   xpath="@refTo" />
    </xs:keyref>

    <xs:unique name="ACD_Timing-anc-key" >
      <xs:selector xpath="ACD_Timing/*/*" /> 
      <xs:field xpath="@nickname" />
    </xs:unique>

    <xs:keyref name="ACD_Timing-anc-keyref" refer="ACD_Timing-anc-key" >
      <xs:selector xpath="ACD_Timing/ACD_Timing-param/*/ancRef" />
      <xs:field   xpath="@refTo" />
    </xs:keyref>


    <xs:unique name="CAL_Mode-anc-key" >
      <xs:selector xpath="CAL_Mode/*/*" /> 
      <xs:field xpath="@nickname" />
    </xs:unique>

    <xs:keyref name="CAL_Mode-anc-keyref" refer="CAL_Mode-anc-key" >
      <xs:selector xpath="CAL_Mode/CAL_Mode-param/*/ancRef" />
      <xs:field   xpath="@refTo" />
    </xs:keyref>

    <xs:unique name="CAL_Timing-anc-key" >
      <xs:selector xpath="CAL_Timing/*/*" /> 
      <xs:field xpath="@nickname" />
    </xs:unique>

    <xs:keyref name="CAL_Timing-anc-keyref" refer="CAL_Timing-anc-key" >
      <xs:selector xpath="CAL_Timing/CAL_Timing-param/*/ancRef" />
      <xs:field   xpath="@refTo" />
    </xs:keyref>

    <xs:unique name="CAL_LAC-anc-key" >
      <xs:selector xpath="CAL_LAC/*/*" /> 
      <xs:field xpath="@nickname" />
    </xs:unique>

    <xs:keyref name="CAL_LAC-anc-keyref" refer="CAL_LAC-anc-key" >
      <xs:selector xpath="CAL_LAC/CAL_LAC-param/*/ancRef" />
      <xs:field   xpath="@refTo" />
    </xs:keyref>

    <xs:unique name="CAL_FLE-anc-key" >
      <xs:selector xpath="CAL_FLE/*/*" /> 
      <xs:field xpath="@nickname" />
    </xs:unique>

    <xs:keyref name="CAL_FLE-anc-keyref" refer="CAL_FLE-anc-key" >
      <xs:selector xpath="CAL_FLE/CAL_FLE-param/*/ancRef" />
      <xs:field   xpath="@refTo" />
    </xs:keyref>

    <xs:unique name="CAL_FHE-anc-key" >
      <xs:selector xpath="CAL_FHE/*/*" /> 
      <xs:field xpath="@nickname" />
    </xs:unique>

    <xs:keyref name="CAL_FHE-anc-keyref" refer="CAL_FHE-anc-key" >
      <xs:selector xpath="CAL_FHE/CAL_FHE-param/*/ancRef" />
      <xs:field   xpath="@refTo" />
    </xs:keyref>

    <xs:unique name="CAL_ULD-anc-key" >
      <xs:selector xpath="CAL_ULD/*/*" /> 
      <xs:field xpath="@nickname" />
    </xs:unique>

    <xs:keyref name="CAL_ULD-anc-keyref" refer="CAL_ULD-anc-key" >
      <xs:selector xpath="CAL_ULD/CAL_ULD-param/*/ancRef" />
      <xs:field   xpath="@refTo" />
    </xs:keyref>

    <xs:unique name="TKR_Mode-anc-key" >
      <xs:selector xpath="TKR_Mode/*/*" /> 
      <xs:field xpath="@nickname" />
    </xs:unique>

    <xs:keyref name="TKR_Mode-anc-keyref" refer="TKR_Mode-anc-key" >
      <xs:selector xpath="TKR_Mode/TKR_Mode-param/*/ancRef" />
      <xs:field   xpath="@refTo" />
    </xs:keyref>

    <xs:unique name="TKR_Timing-anc-key" >
      <xs:selector xpath="TKR_Timing/*/*" /> 
      <xs:field xpath="@nickname" />
    </xs:unique>

    <xs:keyref name="TKR_Timing-anc-keyref" refer="TKR_Timing-anc-key" >
      <xs:selector xpath="TKR_Timing/TKR_Timing-param/*/ancRef" />
      <xs:field   xpath="@refTo" />
    </xs:keyref>

    <xs:unique name="TKR_Strips-anc-key" >
      <xs:selector xpath="TKR_Strips/*/*" /> 
      <xs:field xpath="@nickname" />
    </xs:unique>

    <xs:keyref name="TKR_Strips-anc-keyref" refer="TKR_Strips-anc-key" >
      <xs:selector xpath="TKR_Strips/TKR_Strips-param/*/ancRef" />
      <xs:field   xpath="@refTo" />
    </xs:keyref>

    <xs:unique name="TKR_Thresh-anc-key" >
      <xs:selector xpath="TKR_Thresh/*/*" /> 
      <xs:field xpath="@nickname" />
    </xs:unique>

    <xs:keyref name="TKR_Thresh-anc-keyref" refer="TKR_Thresh-anc-key" >
      <xs:selector xpath="TKR_Thresh/TKR_Thresh-param/*/ancRef" />
      <xs:field   xpath="@refTo" />
    </xs:keyref>

    <xs:unique name="TRG_GEM-anc-key" >
      <xs:selector xpath="TRG_GEM/*/*" /> 
      <xs:field xpath="@nickname" />
    </xs:unique>

    <xs:keyref name="TRG_GEM-anc-keyref" refer="TRG_GEM-anc-key" >
      <xs:selector xpath="TRG_GEM/TRG_GEM-param/*/ancRef" />
      <xs:field   xpath="@refTo" />
    </xs:keyref>

    <xs:unique name="TRG_ROI-anc-key" >
      <xs:selector xpath="TRG_ROI/*/*" /> 
      <xs:field xpath="@nickname" />
    </xs:unique>

    <xs:keyref name="TRG_ROI-anc-keyref" refer="TRG_ROI-anc-key" >
      <xs:selector xpath="TRG_ROI/TRG_ROI-param/*/ancRef" />
      <xs:field   xpath="@refTo" />
    </xs:keyref>

   <xs:unique name="GNL_Mode-anc-key" >
      <xs:selector xpath="GNL_Mode/*/*" /> 
      <xs:field xpath="@nickname" />
    </xs:unique>

    <xs:keyref name="GNL_Mode-anc-keyref" refer="GNL_Mode-anc-key" >
      <xs:selector xpath="GNL_Mode/GNL_Mode-param/*/ancRef" />
      <xs:field   xpath="@refTo" />
    </xs:keyref>

   <xs:unique name="GNL_Timing-anc-key" >
      <xs:selector xpath="GNL_Timing/*/*" /> 
      <xs:field xpath="@nickname" />
    </xs:unique>

    <xs:keyref name="GNL_Timing-anc-keyref" refer="GNL_Timing-anc-key" >
      <xs:selector xpath="GNL_Timing/GNL_Timing-param/*/ancRef" />
      <xs:field   xpath="@refTo" />
    </xs:keyref>


    <xs:unique name="Filter_Associate-anc-key" >
      <xs:selector xpath="Filter_Associate/*/*" /> 
      <xs:field xpath="@nickname" />
    </xs:unique>

    <xs:keyref name="Filter_Associate-anc-keyref" 
 	refer="Filter_Associate-anc-key" >
      <xs:selector xpath="Filter_Associate/Filter_Associate-param/*/ancRef" />
      <xs:field   xpath="@refTo" />
    </xs:keyref>


    <xs:key name="ACD_LCI_dict-key" >
      <xs:selector xpath="ACD_LCI/ACD_LCI-anc/*" />
      <xs:field xpath="@nickname" />
    </xs:key>


    <xs:keyref name="ACD_LCI_dictRange-keyref" refer="ACD_LCI_dict-key" >
      <xs:selector xpath=".//ACD_lci_loop" />
      <xs:field xpath="ACD_rangeDict" />
    </xs:keyref>

    <xs:key name="CAL_LCI_dict-key" >
      <xs:selector xpath="CAL_LCI/CAL_LCI-anc/*" />
      <xs:field xpath="@nickname" />
    </xs:key>


    <xs:keyref name="CAL_LCI_dictRange-keyref" refer="CAL_LCI_dict-key" >
      <xs:selector xpath=".//CAL_lci_loop" />
      <xs:field xpath="CAL_rangeDict" />
    </xs:keyref>

    <xs:key name="TKR_LCI_dict-key" >
      <xs:selector xpath="TKR_LCI/TKR_LCI-anc/*" />
      <xs:field xpath="@nickname" />
    </xs:key>


    <xs:keyref name="TKR_LCI_dictRange-keyref" refer="TKR_LCI_dict-key" >
      <xs:selector xpath=".//TKR_lci_loop" />
      <xs:field xpath="TKR_rangeDict" />
    </xs:keyref>

    <xs:key name="ACD_loop_id-key" >
      <xs:selector xpath=".//ACD_lci_loop" />
      <xs:field xpath="@loop_id" />
    </xs:key>

    <xs:key name="CAL_loop_id-key" >
      <xs:selector xpath=".//CAL_lci_loop" />
      <xs:field xpath="@loop_id" />
    </xs:key>

    <xs:key name="TKR_loop_id-key" >
      <xs:selector xpath=".//TKR_lci_loop" />
      <xs:field xpath="@loop_id" />
    </xs:key>


  </xs:element>

<!-- Stuff for global (container) intent: a list of vote file aliases for all
     precincts.  These come in two flavors:  LPA_INTENT and LCI_INTENT
     (content of LCI_INTENT comes in 3 varieties).

     LPA_INTENT only includes references to LATC precincts.  Each kind of
     global lci intent is identical but also includes a reference to exactly 
     one of the three precincts used to describe lci scripts for a particular
     subsystem: <ACD_LCI>, <CAL_LCI> and <TKR_LCI>. The corresponding 
     LCI-related precincts  for these three varieties of votes with
     root element <LCI_INTENT>
     are LCI_GLOBAL_ACD, LCI_GLOBAL_CAL and LCI_GLOBAL_TKR.  -->

<!-- attribute group to be used by votes file elements -->
  <xs:attributeGroup name="voteAttributes" >
    <xs:attribute name="comment" type="xs:string"/>
  </xs:attributeGroup>

<!-- base type for votes file elements.  Content is alias name -->
  <xs:complexType name="voteFileType"  >
    <xs:simpleContent >
      <xs:extension base ="xs:string" >
      <xs:attributeGroup ref="voteAttributes" />
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>



  <xs:element name="LPA_INTENT" >
    <xs:annotation>
      <xs:documentation> Root element for fully specifying
         LAT configuration intent for physics running.
      </xs:documentation>
    </xs:annotation> 
    <xs:complexType>
      <xs:sequence>
        <xs:choice>
          <xs:element name="description" type="xs:string"   />
          <xs:element ref="method"   />
        </xs:choice>
        <xs:element name="TRG_GEM-vote" type="voteFileType"  />
        <xs:element name="TRG_ROI-vote" type="voteFileType"  />
        <xs:element name="GNL_Mode-vote" type="voteFileType"  />
        <xs:element name="GNL_Timing-vote" type="voteFileType" />
        <xs:element name="ACD_Mode-vote" type="voteFileType"  />
        <xs:element name="ACD_Timing-vote" type="voteFileType" />
        <xs:element name="ACD_Bias-vote" type="voteFileType" />
        <xs:element name="ACD_Hld-vote" type="voteFileType"  />
        <xs:element name="ACD_PHA-vote" type="voteFileType"  />
        <xs:element name="ACD_Veto-vote" type="voteFileType"  />
        <xs:element name="CAL_Mode-vote" type="voteFileType"  />
        <xs:element name="CAL_Timing-vote" type="voteFileType" />
        <xs:element name="CAL_FLE-vote" type="voteFileType"  />
        <xs:element name="CAL_FHE-vote" type="voteFileType" />
        <xs:element name="CAL_LAC-vote" type="voteFileType"  />
        <xs:element name="CAL_ULD-vote" type="voteFileType" />
        <xs:element name="TKR_Mode-vote" type="voteFileType" />
        <xs:element name="TKR_Timing-vote" type="voteFileType" />
        <xs:element name="TKR_Strips-vote" type="voteFileType" />
        <xs:element name="TKR_Thresh-vote" type="voteFileType" />
        <xs:element name="GNL_Ignore-vote" type="voteFileType" />
        <xs:element name="Filter_Associate-vote" type="voteFileType" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="LCI_INTENT" >
    <xs:annotation>
      <xs:documentation> Root element for fully specifying
         LAT configuration intent for a charge calibration run
      </xs:documentation>
    </xs:annotation> 
    <xs:complexType>
      <xs:sequence>
        <xs:choice>
          <xs:element name="description" type="xs:string"   />
          <xs:element ref="method"   />
        </xs:choice>
        <xs:choice>
          <xs:element name="ACD_LCI-vote" type="voteFileType"  />
          <xs:element name="CAL_LCI-vote" type="voteFileType"  />
          <xs:element name="TKR_LCI-vote" type="voteFileType"  />
        </xs:choice>
        <xs:element name="TRG_GEM-vote" type="voteFileType"  />
        <xs:element name="TRG_ROI-vote" type="voteFileType"  />
        <xs:element name="GNL_Mode-vote" type="voteFileType"  />
        <xs:element name="GNL_Timing-vote" type="voteFileType" />
        <xs:element name="ACD_Mode-vote" type="voteFileType"  />
        <xs:element name="ACD_Timing-vote" type="voteFileType" />
        <xs:element name="ACD_Bias-vote" type="voteFileType" />
        <xs:element name="ACD_Hld-vote" type="voteFileType"  />
        <xs:element name="ACD_PHA-vote" type="voteFileType"  />
        <xs:element name="ACD_Veto-vote" type="voteFileType"  />
        <xs:element name="CAL_Mode-vote" type="voteFileType"  />
        <xs:element name="CAL_Timing-vote" type="voteFileType" />
        <xs:element name="CAL_FLE-vote" type="voteFileType"  />
        <xs:element name="CAL_FHE-vote" type="voteFileType" />
        <xs:element name="CAL_LAC-vote" type="voteFileType"  />
        <xs:element name="CAL_ULD-vote" type="voteFileType" />
        <xs:element name="TKR_Mode-vote" type="voteFileType" />
        <xs:element name="TKR_Timing-vote" type="voteFileType" />
        <xs:element name="TKR_Strips-vote" type="voteFileType" />
        <xs:element name="TKR_Thresh-vote" type="voteFileType" />
        <xs:element name="GNL_Ignore-vote" type="voteFileType" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

</xs:schema>
