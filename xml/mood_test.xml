<?xml version="1.0" ?>
<rdbms        xsi:noNamespaceSchemaLocation="rdbmsDescrip.xsd"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       dbs="mood_test"
       SchemaVersion="2.0"
       CVSid= "$Id: mood_test.xml,v 1.3 2007/01/12 23:36:14 jrb Exp $"   >

  <table name="Configs"
     comment="Describe configuration instances for MOOT" version="v1r11" >
    <col name="config_key" >
      <src null="false">
        <from agent="auto_increment" />
      </src>
      <type typename="int" unsigned="true">
        <restriction>          
          <nonnegative />   
        </restriction>
      </type>
      <comment>This is the primary key, automatically set when a 
          row is inserted.</comment>
    </col>
    <col name="instrument">
      <src null="false">
        <default value="LAT" />
      </src>
      <type typename="varchar" size="16" />
      <comment>Instrument for which this Config is intended </comment>
    </col>

    <col name="name" >
      <src null="false">
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="255" />
      <comment>user-friendly way to identify the Config, preferably unique
               but uniqueness is not enforced.
      </comment>
    </col>

    <col name="status" >
      <src null="false">
        <default value="STARTED" />
      </src>
      <type typename="enum" >
        <restriction>
          <enum use="require" values="STARTED ABORT CREATED INVALID" />
        </restriction>
      </type>
      <comment>Making a config is a long process.  Mark 'CREATED' only
         when complete and valid</comment>
    </col>

    <col name="active_state" >
      <src null="false">
        <default value="INACTIVE" />
      </src>
      <type typename="enum" >
        <restriction>
          <enum use="require" values="ACTIVE INACTIVE MULTI" />
        </restriction>
      </type>
      <comment>Place where app. can mark Config of particular
         (name, alg, step, instr) as preferred (or not)
        </comment>
    </col>


    <col name="mode" >
      <src null="false">
        <from agent="enduser" />
      </src>
      <type typename="enum" >
        <restriction>
          <enum use="require" values="DATA CALIB QUIET TEST" />
        </restriction>
      </type>
      <comment>Mode for this configuration</comment>
    </col>

    <col name="algorithm" >
      <src null="false">
        <default value="none" />
      </src>
      <type typename="varchar" size="255" />
      <comment>set to something if this config is part of a sequence
               needed for a single algorithm
      </comment>
    </col>

    <col name="alg_step" >
      <src null="false">
        <default value="1" />
      </src>
      <type typename="smallint" />
      <comment>set to step number if this config is part of a sequence
               needed for a single algorithm
      </comment>
    </col>

    <col name="description" >
      <src null="false" >
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="255" />
      <comment>Optional comments about anything at all</comment>
    </col>

    <col name="creation_request_time" >
      <src null="true" >
        <from agent="service" contents="insert_time" />         
      </src>
      <type typename="datetime" >
        <restriction>
          <interval min="1970-1-1" max="2037-12-31"/>
        </restriction>
      </type>
      <comment>
      Date when this row was entered into database, to be
      set automatically by service (not by end user)
      </comment>
    </col>


    <col name="creation_end_time" >
      <src null="true" >
        <default value="2037-12-31" />
      </src>
      <type typename="datetime" >
        <restriction>
          <interval min="1970-1-1" max="2037-12-31"/>
        </restriction>
      </type>
      <comment>
      Date when config creation completed or was aborted.
      </comment>
    </col>


    <col name="creator" >
      <src null="false" >
        <from agent="service"  contents="username" />
      </src>
      <type typename="varchar" size="32" />
      <comment>Service creating the row should determine user id invoking
             it and put it in this field.
      </comment>
    </col>
    <primary col="config_key" />
  </table>
<!-- start Delegates -->
  <table name="Delegates"
     comment="Describe Conditions set instances for MOOT" version="v1r0" >
    <col name="delegate_key" >
      <src null="false">
        <from agent="auto_increment" />
      </src>
      <type typename="int" unsigned="true">
        <restriction>          
          <nonnegative />   
        </restriction>
      </type>
      <comment>This is the primary key, automatically set when a 
          row is inserted.</comment>
    </col>

    <col name="name" >
      <src null="false">
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="16" />
      <comment>user-friendly way to identify the Conditions collection, 
              preferably unique but uniqueness is not enforced.
      </comment>
    </col>

    <col name="status" >
      <src null="false">
        <from agent="enduser" />
      </src>
      <type typename="enum" >
        <restriction>
          <enum use="require" values="OK INACTIVE" />
        </restriction>
      </type>
      <comment>status refers to usability during build </comment>
    </col>


    <col name="description" >
      <src null="false" >
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="255" />
      <comment>Optional comments about anything at all</comment>
    </col>

    <col name="creator" >
      <src null="false" >
        <from agent="service"  contents="username" />
      </src>
      <type typename="varchar" size="32" />
      <comment>Service creating the row should determine user id invoking
             it and put it in this field.
      </comment>
    </col>

    <col name="creation_time" >
      <src null="true" >
        <from agent="service" contents="insert_time" />         
      </src>
      <type typename="datetime" >
        <restriction>
          <interval min="1970-1-1" max="2037-12-31"/>
        </restriction>
      </type>
      <comment>
      Date when this row was entered into database, to be
      set automatically by service (not by end user)
      </comment>
    </col>

    <primary col="delegate_key" />


  </table>

<!-- end Delegates -->
<!-- start of Conditions -->
  <table name="Conditions"
     comment="Describe Conditions set instances for MOOT" version="v1r0" >
    <col name="condition_key" >
      <src null="false">
        <from agent="auto_increment" />
      </src>
      <type typename="int" unsigned="true">
        <restriction>          
          <nonnegative />   
        </restriction>
      </type>
      <comment>This is the primary key, automatically set when a 
          row is inserted.</comment>
    </col>

    <col name="name" >
      <src null="false">
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="32" />
      <comment>user-friendly way to identify the Conditions collection, 
              preferably unique but uniqueness is not enforced.
      </comment>
    </col>

<!-- Not sure we need an instrument column.
    <col name="instrument">
      <src null="false">
        <default value="LAT" />
      </src>
      <type typename="varchar" size="16" />
      <comment>Instrument for which these conditions are intended </comment>
    </col>
-->

    <col name="status" >
      <src null="false">
        <from agent="enduser" />
      </src>
      <type typename="enum" >
        <restriction>
          <enum use="require" values="OK INVALID SUPSED" />
        </restriction>
      </type>
      <comment>status refers to usability during build </comment>
    </col>


    <col name="description" >
      <src null="false" >
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="255" />
      <comment>Optional comments about anything at all</comment>
    </col>


    <col name="delegate_fk" >
      <src null="false" >
        <from agent="enduser" />
      </src>
      <type typename="int" unsigned="true" >
        <restriction>          
          <nonnegative />   
        </restriction>
      </type>
      <fk tableName="Delegates" keyCol="delegate_key" />
      <comment>A non-trivial condition set applies only to parameters
         for one delegate</comment>
    </col>

    <col name="legain" >
      <src null="false">
         <default value="none" />
      </src>
      <type typename="enum" >
        <restriction>
          <enum use="require" values="0 1 2 3 4 5 6 7 none" />
        </restriction>
      </type>
      <comment>CAL low-energy gain setting, normally 5</comment>
    </col>

    <col name="hegain" >
      <src null="false" >
        <default value="none" />
      </src>
      <type typename="enum" >
        <restriction>
          <enum use="require" 
             values="0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 none" />
        </restriction>
      </type>
      <comment>CAL high-energy gain setting, normally 15 for flight</comment>
    </col>

    <col name="temperature" >
      <src null="false" >
        <default value="0" />
      </src>
      <type typename="float" />
      <comment>
      </comment>
    </col>

    <col name="temperature_tol" >
      <src null="false" >
        <default value="0" />
      </src>

      <type typename="float" >
        <restriction>
          <nonnegative />
        </restriction>
      </type>
      <comment>
      </comment>
    </col>

      
    <col name="creator" >
      <src null="false" >
        <from agent="service"  contents="username" />
      </src>
      <type typename="varchar" size="32" />
      <comment>Service creating the row should determine user id invoking
             it and put it in this field.
      </comment>
    </col>

    <col name="creation_time" >
      <src null="true" >
        <from agent="service" contents="insert_time" />         
      </src>
      <type typename="datetime" >
        <restriction>
          <interval min="1970-1-1" max="2037-12-31"/>
        </restriction>
      </type>
      <comment>
      Date when this row was entered into database, to be
      set automatically by service (not by end user)
      </comment>
    </col>

    <primary col="condition_key" />


  </table>

<!-- end of Conditions -->

<!-- Instance tables: OfflineCalib, Parameters, FSW_inputs, Ancillary  -->
  <table name="OfflineCalib" 
    comment="metadata table for LAT calibrations" version="v2r1">
    <!-- define columns -->

    <col name="ser_no" >
      <src null="false">
        <from agent="auto_increment" />
      </src>
      <type typename="int">
        <!-- The restriction element is optional.  can also indicate
        min and/or max, required enum set, or recommended enum set 
        -->
        <restriction>          
          <nonnegative />   
        </restriction>
      </type>
      <comment>This is the primary key, automatically set when a 
          row is inserted.</comment>
    </col>

    <col name="instrument" >
      <!-- this is a required field -->
      <src  null="false" stickyInsert="true"> 
        <from agent="enduser"  />
      </src>
      <type typename="varchar" size="16">
        <restriction>
          <enum use="prefer" values="LAT EM EM2 cu06 miniTower"/>
        </restriction>
      </type>
      <comment>Instrument on which calibration occurred.  Standard
        calibration software is only guaranteed to work with
        instruments from the recommended set.
     </comment>
    </col>

    <col name="calib_type" >
      <src null="false">  <!-- i.e. this is a required field -->
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="20">
        <restriction>
          <enum use="prefer" values=
            "TKR_DeadChan TKR_HotChan TKR_Splits TKR_TOTSignal TKR_ChargeScale TKR_TrgThresh TKR_DataThresh CAL_Ped CAL_MuSlope CAL_MevPerDac CAL_TholdCI CAL_TholdMuon CAL_Asym CAL_ElecGain CAL_LightAsym CAL_IntNonlin ACD_Ped ACD_ElecGain Test_Gen" />
        </restriction>
      </type>
      <comment>Calibration type.  Standard
        calibration software is only guaranteed to work with
        those on the recommended list.
     </comment>
    </col>
    
    <col name="flavor" >
      <src null="false" stickyInsert="true">
        <default value="vanilla" />
      </src>
      <type typename="varchar" size="30">
        <restriction>
          <enum use="prefer" values="vanilla ideal" />
        </restriction>
      </type>
      <comment>Normal production calibrations will be "vanilla".
             "ideal" is commonly used for simulations
    </comment>
    </col>
    
    <col name="data_fmt" >
      <src null="false" stickyInsert="true">
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="10">
        <restriction>
          <enum use="prefer" values="XML ROOT" />
        </restriction>
      </type>
      <comment>XML is the only supported format for most calibrations</comment>
    </col>
    
    <col name="data_ident" >
      <src null="false" >
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="255">
        <restriction>
          <file />
        </restriction>
      </type>
      <comment>Path and filename for the calibration 
     data, relative to MOOT archive root.
    </comment>
    </col>

    <col name="vstart" >
      <src  null="false" stickyInsert="true"> 
        <default value="2037-12-31" />
      </src>
      <type typename="datetime">
        <restriction>
          <interval min="1970-1-1" max="2037-12-31"/>
        </restriction>
      </type>
      <comment>Start of period for which calibration is valid. Will be 
            set to 'End Of Time' unless user specifies otherwise.
      </comment>
    </col>

    <col name="vend" >
      <!-- If no value is supplied, calibration is marked as being
      valid until the last possible time
      -->
      <src null="false" stickyInsert="true"> 
        <default value="2037-12-31" />
      </src>
      <type typename="datetime">
        <restriction>
          <interval min="1970-1-1" max="2037-12-31"/>
        </restriction>
      </type>
      <comment>End of period for which calibration is valid</comment>
    </col>

    <col name="proc_level" >
      <src null="false" stickyInsert="true">
        <default value="TEST" />
      </src>
      <type typename="enum">
        <restriction>
          <enum use="require" values="PROD TEST DEV SUPSED" />
        </restriction>
      </type>
      <comment>
      Is this calibration to be taken seriously (i.e., PROD)? Ideally,
      only one calibration of a given calib_type, flavor, etc.,
      covering a particular instant should be PROD at a time.
    </comment>
    </col>


    <col name="completion" >
      <src null="false" stickyInsert="true">
        <from agent="enduser"  />
      </src>
      <type typename="enum">
        <restriction>
          <enum use="require" values="OK INC ABORT" />
        </restriction>
      </type>
      <comment>Every calibration must be marked with one of these
      completion states.  "OK" just means the procedure completed,
      not necessarily that the results were any good.
    </comment>
    </col>      



    <col name="locale" >
      <!-- Should it be required rather than defaulted? -->
      <src null="false" stickyInsert="true"> 
        <default value="orbit" />
      </src>
      <type typename="varchar" size="12">
        <restriction>
          <enum use="prefer" values="orbit SLAC NRL CERN" />
        </restriction>
      </type>
      <comment>Where the data was taken.  May be used "as is" or may
        be input to some procedure, such as a root macro or analysis job.
    </comment>
    </col>


    <col name="input_desc" >
      <src null="true" stickyInsert="true">
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="255" />
      <comment>Optional comments about input to calibration algorithm</comment>
    </col>

    <col name="notes" >
      <src null="true" >
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="255" />
      <comment>Optional comments about anything at all</comment>
    </col>

    <col name="status" >
      <src null="false">
        <default value="STARTED" />
      </src>
      <type typename="enum" >
        <restriction>
          <enum use="require" values="STARTED ABORT CREATED INVALID" />
        </restriction>
      </type>
      <comment>If file must be copied to MOOT archive, set this to
         STARTED before the copy, then update to CREATED if successful.
      </comment>
    </col>

    <col name="fmt_version" >
      <!-- optional; enduser specifies if anyone does -->
      <src null="true" stickyInsert="true">
        <from agent="enduser"  />
      </src>
      <type typename="varchar" size="16" />
      <!-- might add restriction which is a pattern definition, e.g.
      Vnnn.Rnnn.Pnnn
      -->
      <comment>Optional place to specify what version of data format was
             used for this data set, so that consumers can decide 
             how or whether to read it
    </comment>
    </col>

    <col name="update_time" >
      <!-- field is nullable in a non-standard fashion.  It never really
      contains null; however when it is left unspecified rdbms will
      fill it with current time. 
      Note src element is redundant once we know type is "timestamp"
      -->
      <src null="true">
        <from agent="service" contents="update_time" />         
      </src>
      <type typename="datetime" size="14" />
      <comment>Time of last modification to row. Equal to time it was entered
      if there were no subsequent mods.  End user is not allowed to set it
    </comment>
    </col>

    <col name="enter_time" >
      <src null="true" >
        <from agent="service" contents="insert_time" />         
      </src>
      <type typename="datetime" >
        <restriction>
          <interval min="1970-1-1" max="2037-12-31"/>
        </restriction>
      </type>
      <comment>
      Date when this calibration was entered into database, to be
      set automatically by service (not by end user)
    </comment>
    </col>
    

    <col name="prod_start" >
      <src null="true" stickyInsert="true">
        <from agent="enduser" />
      </src>
      <type typename="datetime" >
        <restriction>
          <interval min="1970-1-1" max="2037-12-31"/>
        </restriction>
      </type>
      <comment>
      Date when this calibration was declared to be PROD (if it ever was)
    </comment>
    </col>

    <col name="prod_end" >
      <src  null="true" stickyInsert="true">
        <from agent="enduser" />
      </src>
      <type typename="datetime" >
        <restriction>
          <interval min="1970-1-1" max="2037-12-31"/>
        </restriction>
      </type>
      <comment>
      Date, if any, when this calibration ceased being called PROD
    </comment>
    </col>


    <col name="creator" >
      <src  null="true">
        <from agent="service" contents="service_name" />
      </src>
      <!-- could maybe cut down size -->
      <type typename="varchar" size="255" />
      <comment> program, script or whatever adding the row is responsible 
         for filling in this field with something identifying it 
    </comment>
    </col>

    <col name="uid" >
      <src null="false" >
        <from agent="service"  contents="username" />
      </src>
      <type typename="varchar" size="12" />
      <comment>Service creating the row should determine user id invoking
             it and put it in this field.
    </comment>
    </col>


    <col name="data_size" >
      <src null="true" >
        <from agent="enduser" />
      </src>
      <type typename="int" size="11" >
        <restriction>
          <nonnegative />
        </restriction>
      </type>
      <comment>Field is optional.  If supplied, must be non-negative integer
    </comment>
    </col>

    <!-- define primary key, indices -->
    <primary col="ser_no" />

    <index name="typical_search"
      cols="completion instrument calib_type flavor proc_level" />

    <!-- define extra constraints -->
    <assert name="validRow">
      <and>
        <compare relation="lessThan">
          <colRef col="vstart" which="toBe"/>
          <colRef col="vend" which="toBe" />
        </compare>
        <or>
          <isNull>
            <colRef col="prod_start" which="toBe"/>
          </isNull>
          <isNull>
            <colRef col="prod_end" which="toBe"/>
          </isNull>
          <isEmpty>
            <colRef col="prod_start" which="toBe"/>
          </isEmpty>
          <isEmpty>
            <colRef col="prod_end" which="toBe"/>
          </isEmpty>
          <compare relation="lessThan">
            <colRef col="prod_start" which="toBe" />
            <colRef col="prod_end" which="toBe" />
          </compare>
        </or>
      </and>
    </assert>

    <!-- To be 'official', completion value must be "OK" and proc_level 
         must be "DEV" or "PROD"; else just do raw insert -->
    <assert name="checkQuality">
      <and>
        <compare relation="equal">
          <colRef col="completion" which="toBe" />
          <value>OK</value>
        </compare>
        <or>
          <compare relation="equal">
            <colRef col="proc_level" which="toBe" />
            <value>PROD</value>
          </compare>
          <compare relation="equal">
            <colRef col="proc_level" which="toBe" />
            <value>DEV</value>
          </compare>
        </or>
      </and>
    </assert>

    <assert name="maySupersede">
      <and>
        <compare relation="equal">
          <colRef col="completion" />
          <value>OK</value>
        </compare>
        <compare relation="equal">
          <colRef col="proc_level" />
          <value>PROD</value>
        </compare>
      </and>
    </assert>

    <assert name="laterVstart">
      <!-- Look for similar rows with later vstart -->
      <and>
        <compare relation="equal">
          <colRef col="flavor" />
          <colRef col="flavor" which="toBe" />
        </compare>
        <compare relation="equal">
          <colRef col="instrument" />
          <colRef col="instrument" which="toBe" />
        </compare>
        <compare relation="equal">
          <colRef col="calib_type" />
          <colRef col="calib_type" which="toBe" />
        </compare>
        <compare relation="equal">
          <colRef col="proc_level" />
          <colRef col="proc_level" which="toBe" />
        </compare>

        <compare relation="greaterThan">
          <colRef col="vstart" />
          <colRef col="vstart" which="toBe" />
        </compare>
      </and>
    </assert>

<!-- commenting out <assert name="insertCheck"> doesn't help  -->
    <!-- Look for possible conflicting rows -->
    <assert name="insertCheck">
      <and>
        <compare relation="equal">
          <colRef col="flavor" />
          <colRef col="flavor" which="toBe" />
        </compare>
        <compare relation="equal">
          <colRef col="instrument" />
          <colRef col="instrument" which="toBe" />
        </compare>
        <compare relation="equal">
          <colRef col="calib_type" />
          <colRef col="calib_type" which="toBe" />
        </compare>
        <compare relation="equal">
          <colRef col="proc_level" />
          <colRef col="proc_level" which="toBe" />
        </compare>

        <compare relation="lessOrEqual" >
          <colRef col="vstart" />
          <colRef col="vstart" which="toBe" />
        </compare>
        <compare relation="greaterThan">
          <colRef col="vend" />
          <colRef col="vstart" which="toBe" />
        </compare>
      </and>
    </assert>

    <!-- How does one insert a row? First check for internal consistency
         (assertion validRow).  If the row also is "official" - meets
         certain criteria such that we care about it for production
         or near-production use - continue checking:
            If there is another similar row (same calib_type, flavor, etc.)
            with a later vstart time, quit.
            If there are other similar rows with vend > new row's vstart,
            adjust them.
            Then do insert
     -->
<!-- commenting out <insertNew> didn't help.  Put it back. -->
    <insertNew internalCond="validRow"  official="checkQuality">
      <interRow>
        <query assertRef="laterVstart" >
          <select>ser_no</select>
        </query>
        <quit />
      </interRow>
      <interRow>
        <query  assertRef="insertCheck" >
          <select>ser_no</select>
        </query>

        <!-- now describe how to update found rows -->
        <set destCol="vend">
          <setColRef col="vstart" which="toBe" />
        </set>
      </interRow>
    </insertNew>

    <!-- when a row is superseded, many of the values will be the same in
         the new row as is in the old.  However, the old row must have
         proc_level changed to SUPSED and proc_end date should be
         set.  New row needs its own values for 

               data_ident
               notes
               data_fmt       (but can default to old value)
               locale         (but can default to old value)
               input_desc     (but can default to old value)
               fmt_version    (but can default to old value)
               input_start    (but can default to old value)
               input_end      (but can default to old value)
               data_size      (but can default to old value)

         Certain other columns get set automatically because value of
         agent field is "service" : enter_time, update_time, creator.
         Also service needs to know to set prod_start to NOW.
         

         Finally, there are a couple conditions which must hold for any row
         to be superseded:  proc_level is PROD and completion is OK
       -->

    <supersede onlyIf="maySupersede" >
      <set destCol="proc_level" destRow="old">
        <value>SUPSED</value>
      </set>

 <!-- timestamp value NOW needs special handling-->
      <set destCol="prod_end" destRow="old">
        <value interp="time">NOW</value> 
      </set>

      <set destCol="prod_start" destRow="toBe">
        <value interp="time">NOW</value> 
      </set>

      <set destCol="proc_level" destRow="toBe">
        <value>PROD</value>
      </set>

      <set destCol="completion" destRow="toBe">
        <value>OK</value>
      </set>

      <set destRow="toBe" destCol="data_ident" >
        <ask />
      </set>
      <set destRow="toBe" destCol="notes" >
        <ask />
      </set>

<!-- this says take value from old row by default, but may override -->
      <set destRow="toBe" destCol="data_fmt" >
        <setColRef which="old" col="data_fmt" force="false" />
      </set>

      <set destRow="toBe" destCol="locale" >
        <setColRef which="old" col="locale" force="false" />
      </set>
        
      <set destRow="toBe" destCol="input_desc" >
        <setColRef which="old" col="input_desc" force="false" />
      </set>
      <set destRow="toBe" destCol="fmt_version" >
        <setColRef which="old" col="fmt_version" force="false" />
      </set>
      <set destRow="toBe" destCol="data_size" >
        <setColRef which="old" col="data_size" force="false" />
      </set>

     <!-- this says take value from old row as is (may not override -->
     <set destRow="toBe" destCol="instrument" >
        <setColRef which="old" col="instrument" />
     </set>

     <set destRow="toBe" destCol="flavor" >
        <setColRef which="old" col="flavor" />
     </set>

     <set destRow="toBe" destCol="calib_type" >
        <setColRef which="old" col="calib_type" />
     </set>

     <set destRow="toBe" destCol="vstart" >
        <setColRef which="old" col="vstart" />
     </set>

     <set destRow="toBe" destCol="vend" >
        <setColRef which="old" col="vend" />
     </set>


    </supersede>
  </table>

<!--    end OfflineCalib -->
  <table name="Parameters"
     comment="Describe parameter set instances for MOOT" version="v1r0">
    <col name="parm_key" >
      <src null="false">
        <from agent="auto_increment" />
      </src>
      <type typename="int" unsigned="true">
        <!-- The restriction element is optional.  can also indicate
        min and/or max, required enum set, or recommended enum set 
        -->
        <restriction>          
          <nonnegative />   
        </restriction>
      </type>
      <comment>This is the primary key, automatically set when a 
          row is inserted.</comment>
    </col>
   
    <col name="class_fk" >
      <src null="false" >
        <from agent="enduser" />
      </src>
      <type typename="int" unsigned="true" >
        <restriction>          
          <nonnegative />   
        </restriction>
      </type>
      <fk tableName="Parameter_class" keyCol="Parameter_class_key" />

      <comment>Refers to primary key in Parameter_class table.
          See foreign key definition below.
      </comment>
    </col>

    <col name="condition_fk" >
      <src null="false" >
        <default value="1" />
      </src>
      <type typename="int" unsigned="true" >
        <restriction>
          <nonnegative />
        </restriction>
      </type>
      <fk tableName="Conditions" keyCol="condition_key" />
      <comment>Refers to primary key in Conditions table, defaulting
             to generic</comment>
    </col>

    <col name="instrument">
      <src null="false">
        <default value="LAT" />
      </src>
      <type typename="varchar" size="16" />
      <comment>Instrument to which this Parameter applies </comment>
    </col>

    <col name="source" >
      <src null="false" >
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="255">
        <restriction>
          <file />
        </restriction>
      </type>
      <comment>Path and filename for the parameter
       data relative to root directory of MOOT archive.
      </comment>
    </col>

    <col name="source_fmt">
      <src null="false" stickyInsert="true">
        <default value="xml" />
      </src>
      <type typename="varchar" size="32" />
      <comment>XML or other form of text are likely values</comment>
    </col>


    <col name="quality" >
      <src null="false" stickyInsert="true">
        <default value="TEST" />
      </src>
      <type typename="enum">
        <restriction>
          <enum use="require" values="PROD TEST DEV SUPSED INVALID" />
        </restriction>
      </type>
      <comment>
      Is this parameter set to be taken seriously (i.e., PROD)? Ideally,
      only one parameter set of a given parameter class, flavor, etc.,
      covering a particular instant should be PROD at a time.
      </comment>
    </col>

    <col name="flavor" >
      <src null="false" stickyInsert="true">
        <default value="default" />
      </src>
      <type typename="varchar" size="255">
        <restriction>
          <enum use="prefer" values="default vanilla ideal" />
        </restriction>
      </type>
      <comment>Normal production parameter files will be of flavor 'default'
      </comment>
    </col>


    <col name="vstart" >
      <src  stickyInsert="true" null="true"> 
         <default interp="time" value="NOW" />
      </src>
      <type typename="datetime">
        <restriction>
          <interval min="1970-1-1" max="2037-12-31"/>
        </restriction>
      </type>
      <comment>Start of period for which parameter file is valid. MUST be 
            supplied by user</comment>
    </col>

    <col name="vend" >
      <!-- If no value is supplied, file is marked as being
      valid until the last possible time
      -->
      <src null="true" stickyInsert="true"> 
        <default value="2037-12-31" />
      </src>
      <type typename="datetime">
        <restriction>
          <interval min="1970-1-1" max="2037-12-31"/>
        </restriction>
      </type>
      <comment>End of period for which file is valid</comment>
    </col>


    <col name="description" >
      <src null="false" >
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="255" />
      <comment>Optional comments about anything at all</comment>
    </col>

    <col name="status" >
      <src null="false">
        <default value="STARTED" />
      </src>
      <type typename="enum" >
        <restriction>
          <enum use="require" values="STARTED ABORT CREATED INVALID" />
        </restriction>
      </type>
      <comment>If file must be copied to MOOT archive, set this to
         STARTED before the copy, then update to CREATED if successful.
      </comment>
    </col>

    <col name="checksum" >
      <src null="true" >
        <from agent="enduser" />
      </src>
      <type typename="int" unsigned="true" >
        <restriction>          
          <nonnegative />   
        </restriction>
      </type>
      <comment>This can be used to quickly check whether two
         files might be the same.  Matching checksums is no
         guarantee, but will significantly reduce the need to
         do a full diff
      </comment>
    </col>

    <col name="size" >
      <src null="false" >
        <default value="0" />
      </src>
      <type typename="int" unsigned="true" >
        <restriction>          
          <nonnegative />   
        </restriction>
      </type>
      <comment>Size in bytes of source.
      </comment>
    </col>

    <col name="creation_time" >
      <src null="true" >
        <from agent="service" contents="insert_time" />         
      </src>
      <type typename="datetime" >
        <restriction>
          <interval min="1970-1-1" max="2037-12-31"/>
        </restriction>
      </type>
      <comment>
      Date when this row was entered into database, to be
      set automatically by service (not by end user)
      </comment>
    </col>

    <col name="creator" >
      <src null="false" >
        <from agent="service"  contents="username" />
      </src>
      <type typename="varchar" size="12" />
      <comment>Service creating the row should determine user id invoking
             it and put it in this field.
      </comment>
    </col>

    <primary col="parm_key" />

    <!-- define extra constraints -->
    <assert name="validRow">
      <compare relation="lessThan">
        <colRef col="vstart" which="toBe"/>
        <colRef col="vend" which="toBe" />
      </compare>
    </assert>
  </table>
  
  <table name="FSW_inputs"
     comment="Describe parameter set instances for MOOT" version="v1r0">
    <col name="FSW_input_key" >
      <src null="false">
        <from agent="auto_increment" />
      </src>
      <type typename="int" unsigned="true">
        <!-- The restriction element is optional.  can also indicate
        min and/or max, required enum set, or recommended enum set 
        -->
        <restriction>          
          <nonnegative />   
        </restriction>
      </type>
      <comment>This is the primary key, automatically set when a 
          row is inserted.</comment>
    </col>
   
    <col name="class_fk" >
      <src null="false" >
        <from agent="enduser" />
      </src>
      <type typename="int" unsigned="true" >
        <restriction>          
          <nonnegative />   
        </restriction>
      </type>

      <fk tableName="FSW_class" keyCol="FSW_class_key" />
      <comment>Refers to primary key in FSW_class table.
          See foreign key definition below.
      </comment>
    </col>

    <col name="FSW_id" >
      <src null="false" >
        <default value="0" />
      </src>
      <type typename="int" unsigned="true" >
        <restriction>          
          <nonnegative />   
        </restriction>
      </type>
      <comment>Once fmx add has been done for binary equivalent of
        the file, store logical_id here.
      </comment>
    </col>

    <col name="instrument">
      <src null="false">
        <default value="LAT" />
      </src>
      <type typename="varchar" size="16" />
      <comment>Instrument to which this FSW_input applies </comment>
    </col>

    <col name="fmx_db">
      <src null="false">
        <default value="none" />
      </src>
      <type typename="varchar" size="32" />
      <comment>Normally one of "development", "production" </comment>
    </col>

    <col name="status" >
      <src null="false" >
        <default value="new" />
      </src>
      <type typename="varchar" size="32" />
      <comment> Update to 'added' when binary has been created
                and fmx add has been done. 
      </comment>
    </col>

    <col name="source" >
      <src null="false" >
<!--        <from agent="enduser" /> 
       This field is useless in case input is a file list
  -->
        <default value="dont_care" />
      </src>
      <type typename="varchar" size="255">
        <restriction>
          <file />
        </restriction>
      </type>
      <comment>Path and filename for the FSW input file relative to
         root directory of MOOT archive.
      </comment>
    </col>

    <col name="source_fmt">
      <src null="false" >
        <default value="xml" />
      </src>
      <type typename="varchar" size="32" />
      <comment>XML or other form of text are likely values</comment>
    </col>


    <col name="fmx_path" >
      <src null="false" >
        <default value="unknown" />
      </src>
      <type typename="varchar" size="255" />
      <comment>Describes where file handed to fmx goes, relative to root
      </comment>
    </col>

    <col name="description" >
      <src null="false" >
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="255" />
      <comment>Optional comments about anything at all</comment>
    </col>

    <col name="checksum" >
      <src null="true" >
        <from agent="enduser" />
      </src>
      <type typename="int" unsigned="true" >
        <restriction>          
          <nonnegative />   
        </restriction>
      </type>
      <comment>This can be used to quickly check whether two
         files might be the same.  Matching checksums is no
         guarantee, but will significantly reduce the need to
         do a full diff
      </comment>
    </col>

    <col name="size" >
      <src null="false" >
        <default value="0" />
      </src>
      <type typename="int" unsigned="true" >
        <restriction>          
          <nonnegative />   
        </restriction>
      </type>
      <comment>Size in bytes of source.
      </comment>
    </col>

    <col name="creation_time" >
      <src null="true" >
        <from agent="service" contents="insert_time" />         
      </src>
      <type typename="datetime" >
        <restriction>
          <interval min="1970-1-1" max="2037-12-31"/>
        </restriction>
      </type>
      <comment>
      Date when this row was entered into database, to be
      set automatically by service (not by end user)
      </comment>
    </col>

    <col name="creator" >
      <src null="false" >
        <from agent="service"  contents="username" />
      </src>
      <type typename="varchar" size="12" />
      <comment>Service creating the row should determine user id invoking
             it and put it in this field.
      </comment>
    </col>

    <primary col="FSW_input_key" />

  </table>

  <table name="Ancillary" comment="source files for subsytem configs, calibs"
         version="v1r0" >
    <col name="Ancillary_key" >
      <src null="false">
        <from agent="auto_increment" />
      </src>
      <type typename="int" unsigned="true">
        <!-- The restriction element is optional.  can also indicate
        min and/or max, required enum set, or recommended enum set 
        -->
        <restriction>          
          <nonnegative />   
        </restriction>
      </type>
      <comment>This is the primary key, automatically set when a 
          row is inserted.</comment>
    </col>
   
    <col name="class_fk" >
      <src null="false" >
        <from agent="enduser" />
      </src>
      <type typename="int" unsigned="true" >
        <restriction>          
          <nonnegative />   
        </restriction>
      </type>
      <fk tableName="Ancillary_class" keyCol="Ancillary_class_key" />

      <comment>Refers to primary key in Ancillary_class table.
          See foreign key definition below.
      </comment>
    </col>

    <col name="instrument">
      <src null="false">
        <default value="LAT" />
      </src>
      <type typename="varchar" size="16" />
      <comment>Instrument to which this ancillary file applies </comment>
    </col>

    <col name="source" >
      <src null="false" >
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="255">
        <restriction>
          <file />
        </restriction>
      </type>
      <comment>Path and filename for the ancillary
       data relative to root directory of MOOT archive.
      </comment>
    </col>

    <col name="source_fmt">
      <src null="false" stickyInsert="true">
        <default value="xml" />
      </src>
      <type typename="varchar" size="32" />
      <comment>XML or other form of text are likely values</comment>
    </col>


    <col name="quality" >
      <src null="false" stickyInsert="true">
        <default value="TEST" />
      </src>
      <type typename="enum">
        <restriction>
          <enum use="require" values="PROD TEST DEV SUPSED INVALID" />
        </restriction>
      </type>
      <comment>
      Is this parameter set to be taken seriously (i.e., PROD)? Ideally,
      only one parameter set of a given parameter class, flavor, etc.,
      covering a particular instant should be PROD at a time.
      </comment>
    </col>

    <col name="description" >
      <src null="false" >
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="255" />
      <comment>Optional comments about anything at all</comment>
    </col>

    <col name="status" >
      <src null="false">
        <default value="STARTED" />
      </src>
      <type typename="enum" >
        <restriction>
          <enum use="require" values="STARTED ABORT CREATED INVALID" />
        </restriction>
      </type>
      <comment>If file must be copied to MOOT archive, set this to
         STARTED before the copy, then update to CREATED if successful.
      </comment>
    </col>

    <col name="creation_time" >
      <src null="true" >
        <from agent="service" contents="insert_time" />         
      </src>
      <type typename="datetime" >
        <restriction>
          <interval min="1970-1-1" max="2037-12-31"/>
        </restriction>
      </type>
      <comment>
      Date when this row was entered into database, to be
      set automatically by service (not by end user)
      </comment>
    </col>

    <col name="creator" >
      <src null="false" >
        <from agent="service"  contents="username" />
      </src>
      <type typename="varchar" size="12" />
      <comment>Service creating the row should determine user id invoking
             it and put it in this field.
      </comment>
    </col>
    <col name="tower" >
      <src null="false" >
        <default value="-1" />
      </src>
      <type typename="tinyint" >
        <restriction>
          <interval min="-1" max="15" />
        </restriction>
      </type>
      <comment> Special value -1 signifies all or irrelevant
      </comment>
    </col>
    <primary col="Ancillary_key" />
</table>
<!--     temp  -->

<!-- Class tables:  Parameter_class, FSW_class
      TO DO: Ancillary_class, Offline_class     -->
<table name="Parameter_class" gui_readonly="true" version="v1r0"
     comment="each parameter set is an instance of one of these classes">
    <col name="Parameter_class_key" >
      <src null="false">
        <from agent="auto_increment" />
      </src>
      <type typename="int" unsigned ="true" >
        <restriction>          
          <nonnegative />   
        </restriction>
      </type>

      <comment>This is the primary key, automatically set when a 
          row is inserted.</comment>
    </col>

    <col name="name" >
      <src null="false">
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="32" />
      <comment>user-friendly way to identify the parameter class.
               Must be unique within the table
      </comment>
    </col>

    <col name="description">
      <src null="false">
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="255" />
      <comment>Whatever else should be noted about this class
      </comment>
    </col>

    <col name="delegate_fk">
      <src null="true">
        <from agent="enduser" />
      </src>
      <type typename="int" unsigned="true" >
        <restriction>          
          <nonnegative />   
        </restriction>
      </type>
      <fk tableName="Delegates" keyCol="delegate_key" />
      <comment>Delegate which manages this kind of Parameter</comment>
    </col>

    <primary col="Parameter_class_key" />

    <index name="classname_unique_index" cols="name" />
  </table>


  <table name="FSW_class" gui_readonly="true" version="v1r0"
     comment="each parameter set is an instance of one of these classes">
    <col name="FSW_class_key" >
      <src null="false">
        <from agent="auto_increment" />
      </src>
      <type typename="int" unsigned = "true">
        <restriction>          
          <nonnegative />   
        </restriction>
      </type>
      <comment>This is the primary key, automatically set when a 
          row is inserted.</comment>
    </col>

    <col name="name" >
      <src null="false">
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="32" />
      <comment>user-friendly way to identify the FSW_input class.
               Must be unique within the table
      </comment>
    </col>
    <col name="from_precursors">
      <src null="false">
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="32" />
      <comment>Procedure to produce file of this type from its 
               precursors (represented by rows in Parameters table)
      </comment>
    </col>

    <col name="to_binary">
      <src null="false">
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="32" />
      <comment>Procedure to translate source file of this type
               to binary.
      </comment>
    </col>

    <col name="description">
      <src null="true">
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="255" />
      <comment>Whatever else should be noted about this FSW_input class
      </comment>
    </col>

    <primary col="FSW_class_key" />

    <index name="classname_unique_index" cols="name" />
  </table>


<table name="Ancillary_class" gui_readonly="true" version="v1r0"
     comment="each Ancillary data set is an instance of one of these classes">
  <col name="Ancillary_class_key" >
    <src null="false">
      <from agent="auto_increment" />
    </src>
    <type typename="int" unsigned ="true" >
      <restriction>          
        <nonnegative />   
      </restriction>
    </type>

    <comment>This is the primary key, automatically set when a 
          row is inserted.</comment>
  </col>

  <col name="name" >
    <src null="false">
        <from agent="enduser" />
    </src>
    <type typename="varchar" size="32" />
    <comment>user-friendly way to identify the parameter class.
             Must be unique within the table
    </comment>
  </col>

  <col name="description">
    <src null="false">
      <from agent="enduser" />
    </src>
    <type typename="varchar" size="255" />
    <comment>Whatever else should be noted about this class
    </comment>
  </col>

  <primary col="Ancillary_class_key" />

  <index name="classname_unique_index" cols="name" />
</table>
 <!-- end Ancillary_class -->


<table name="Offline_class" gui_readonly="true" version="v1r0"
     comment="each offline calibration reference is an instance of one 
              of these classes">
  <col name="Offline_class_key" >
    <src null="false">
      <from agent="auto_increment" />
    </src>
    <type typename="int" unsigned ="true" >
      <restriction>          
        <nonnegative />   
      </restriction>
    </type>

    <comment>This is the primary key, automatically set when a 
        row is inserted.</comment>
  </col>

  <col name="name" >
    <src null="false">
      <from agent="enduser" />
    </src>
    <type typename="varchar" size="32" />
    <comment>user-friendly way to identify the parameter class.
             Must be unique within the table
    </comment>
  </col>

  <col name="config" >
    <src null="false">
      <default value="0" />
    </src>
    <type typename="tinyint" />
    <comment>If 0 (default), this is a calibration in the sense that it
     describes channel response.  If 1, the row describes part of the
     (operator requested) instrument configuration.
    </comment>
  </col>
  <col name="description">
    <src null="false">
      <from agent="enduser" />
    </src>
    <type typename="varchar" size="255" />
    <comment>Whatever else should be noted about this class
    </comment>
  </col>

  <primary col="Offline_class_key" />

  <index name="classname_unique_index" cols="name" />
</table>
<!-- end Offline_class -->

<table name="FSW_to_Parameters" gui_readonly="true" version="v1r0"
    comment="relate Flight Software input files to the Parameter files
    which are their sources">
  <col name="prim_key" >
    <src null="false">
      <from agent="auto_increment" />
    </src>
    <type typename="int" unsigned ="true" >
      <restriction>          
        <nonnegative />   
      </restriction>
    </type>

    <comment>This is the primary key, automatically set when a 
        row is inserted.</comment>
  </col>
    <col name="FSW_fk" >
      <src null="false" >
        <from agent="enduser" />
      </src>
      <type typename="int" unsigned="true" >
        <restriction>
          <nonnegative />
        </restriction>
      </type>
      <fk tableName="FSW_inputs" keyCol="FSW_input_key" />
      <comment>Refers to row in FSW_inputs</comment>
    </col>
    <col name="Parameter_fk" >
      <src null="false" >
        <from agent="enduser" />
      </src>
      <type typename="int" unsigned="true" >
        <restriction>
          <nonnegative />
        </restriction>
      </type>
      <fk tableName="Parameters" keyCol="parm_key" />
      <comment>Refers to row in Parameters</comment>
    </col>

    <col name="status" >
      <src null="false" >
        <default value="ACTIVE" />
      </src>
      <type typename="varchar" size="32" />
      <comment>If not ACTIVE row should not be used</comment>
    </col>

    <col name="creation_time" >
      <src null="true" >
        <from agent="service" contents="insert_time" />         
      </src>
      <type typename="datetime" >
        <restriction>
          <interval min="1970-1-1" max="2037-12-31"/>
        </restriction>
      </type>
      <comment>
      Date when this row was entered into database, to be
      set automatically by service (not by end user)
      </comment>
    </col>

    <col name="creator" >
      <src null="false" >
        <from agent="service"  contents="username" />
      </src>
      <type typename="varchar" size="12" />
      <comment>Service creating the row should determine user id invoking
             it and put it in this field.
      </comment>
    </col>
    <primary col="prim_key" /> 
    <index name="FSW_fk_index" cols="FSW_fk" />
  </table>

<!--    Configs_to_Fsw -->

  <table name="Configs_to_FSW" gui_readonly="true" version="v1r0"
     comment="relate Flight Software input files to the Parameter files
     which are their sources">
     <col name="prim_key" >
       <src null="false">
         <from agent="auto_increment" />
       </src>
       <type typename="int" unsigned ="true" >
         <restriction>          
           <nonnegative />   
         </restriction>
       </type>
       <comment>This is the primary key, automatically set when a 
         row is inserted.</comment>
     </col>
     <col name="FSW_fk" >
       <src null="false" >
         <from agent="enduser" />
       </src>
       <type typename="int" unsigned="true" >
         <restriction>
           <nonnegative />
         </restriction>
       </type>
       <fk tableName="FSW_inputs" keyCol="FSW_input_key" />
       <comment>Refers to row in FSW_inputs</comment>
     </col>
     <col name="config_fk" >
       <src null="false" >
         <from agent="enduser" />
       </src>
       <type typename="int" unsigned="true" >
         <restriction>
           <nonnegative />
         </restriction>
       </type>
      <fk tableName="Configs" keyCol="config_key" />
       <comment>Refers to row in Configs</comment>
     </col>

    <col name="status" >
      <src null="false" >
        <default value="ACTIVE" />
      </src>
      <type typename="varchar" size="32" />
      <comment>If not ACTIVE row should not be used</comment>
    </col>

    <col name="creation_time" >
      <src null="true" >
        <from agent="service" contents="insert_time" />         
      </src>
      <type typename="datetime" >
        <restriction>
          <interval min="1970-1-1" max="2037-12-31"/>
        </restriction>
      </type>
      <comment>
      Date when this row was entered into database, to be
      set automatically by service (not by end user)
      </comment>
    </col>

    <col name="creator" >
      <src null="false" >
        <from agent="service"  contents="username" />
      </src>
      <type typename="varchar" size="12" />
      <comment>Service creating the row should determine user id invoking
             it and put it in this field.
      </comment>
    </col>
    <primary col="prim_key" /> 
    <index name="config_fk_index" cols="config_fk" />
  </table>

  <table name="Configs_to_Parameters" gui_readonly="true" version="v1r0"
   comment="keep track of requested parameter files when Config was built">
     <col name="prim_key" >
       <src null="false">
         <from agent="auto_increment" />
       </src>
       <type typename="int" unsigned ="true" >
         <restriction>          
           <nonnegative />   
         </restriction>
       </type>
       <comment>This is the primary key, automatically set when a 
         row is inserted.</comment>
     </col>

     <col name="config_fk" >
       <src null="false" >
         <from agent="enduser" />
       </src>
       <type typename="int" unsigned="true" >
         <restriction>
           <nonnegative />
         </restriction>
       </type>
      <fk tableName="Configs" keyCol="config_key" />
       <comment>Refers to row in Configs</comment>
     </col>

     <col name="Parameter_fk" >
       <src null="false" >
         <from agent="enduser" />
       </src>
       <type typename="int" unsigned="true" >
         <restriction>
           <nonnegative />
         </restriction>
       </type>
       <fk tableName="Parameters" keyCol="parm_key" />
       <comment>Refers to row in Parameters requested when
             Config was built.  It is not necessarily used
            if a corresponding FSW binary already exists, built
            from other parameter files.</comment>
     </col>
     <col name="creation_time" >
        <src null="true" >
        <from agent="service" contents="insert_time" />         
      </src>
      <type typename="datetime" >
        <restriction>
          <interval min="1970-1-1" max="2037-12-31"/>
        </restriction>
      </type>
      <comment>
      Date when this row was entered into database, to be
      set automatically by service (not by end user)
      </comment>
    </col>

    <col name="creator" >
      <src null="false" >
        <from agent="service"  contents="username" />
      </src>
      <type typename="varchar" size="12" />
      <comment>Service creating the row should determine user id invoking
             it and put it in this field.
      </comment>
    </col>
    <primary col="prim_key" /> 
  </table>

     

  <table name="Parameters_to_Ancillary" gui_readonly="true" version="v1r0"
     comment="relate Parameter files to the Ancillary files which are their sources">
     <col name="prim_key" >
       <src null="false">
         <from agent="auto_increment" />
       </src>
       <type typename="int" unsigned ="true" >
         <restriction>          
           <nonnegative />   
         </restriction>
       </type>
       <comment>This is the primary key, automatically set when a 
         row is inserted.</comment>
     </col>

     <col name="Parameter_fk" >
       <src null="false" >
         <from agent="enduser" />
       </src>
       <type typename="int" unsigned="true" >
         <restriction>
           <nonnegative />
         </restriction>
       </type>
       <fk tableName="Parameters" keyCol="parm_key" />
       <comment>Refers to row in Paramaeters</comment>
     </col>
     <col name="Ancillary_fk" >
       <src null="false" >
         <from agent="enduser" />
       </src>
       <type typename="int" unsigned="true" >
         <restriction>
           <nonnegative />
         </restriction>
       </type>
       <fk tableName="Ancillary" keyCol="Ancillary_key" />
       <comment>Refers to row in Ancillary</comment>
     </col>

    <col name="status" >
      <src null="false" >
        <default value="ACTIVE" />
      </src>
      <type typename="varchar" size="32" />
      <comment>If not ACTIVE row should not be used</comment>
    </col>

    <col name="creation_time" >
      <src null="true" >
        <from agent="service" contents="insert_time" />         
      </src>
      <type typename="datetime" >
        <restriction>
          <interval min="1970-1-1" max="2037-12-31"/>
        </restriction>
      </type>
      <comment>
      Date when this row was entered into database, to be
      set automatically by service (not by end user)
      </comment>
    </col>

    <col name="creator" >
      <src null="false" >
        <from agent="service"  contents="username" />
      </src>
      <type typename="varchar" size="12" />
      <comment>Service creating the row should determine user id invoking
             it and put it in this field.
      </comment>
    </col>
    <primary col="prim_key" /> 
    <index name="Parameter_fk_index" cols="Parameter_fk" />
  </table>

<!-- add Offline_to_Ancillary -->
  <table name="Offline_to_Ancillary" gui_readonly="true" version="v1r0"
     comment="relate Parameter files to the Ancillary files which are their sources">
     <col name="prim_key" >
       <src null="false">
         <from agent="auto_increment" />
       </src>
       <type typename="int" unsigned ="true" >
         <restriction>          
           <nonnegative />   
         </restriction>
       </type>
       <comment>This is the primary key, automatically set when a 
         row is inserted.</comment>
     </col>

     <col name="Offline_fk" >
       <src null="false" >
         <from agent="enduser" />
       </src>
       <type typename="int">
         <restriction>
           <nonnegative />
         </restriction>
       </type>
       <fk tableName="OfflineCalib" keyCol="ser_no" />
       <comment>Refers to row in OfflineCalib</comment>
     </col>
     <col name="Ancillary_fk" >
       <src null="false" >
         <from agent="enduser" />
       </src>
       <type typename="int" unsigned="true" >
         <restriction>
           <nonnegative />
         </restriction>
       </type>
       <fk tableName="Ancillary" keyCol="Ancillary_key" />
       <comment>Refers to row in Ancillary</comment>
     </col>
    <col name="status" >
      <src null="false" >
        <default value="ACTIVE" />
      </src>
      <type typename="varchar" size="32" />
      <comment>If not ACTIVE row should not be used</comment>
    </col>

    <col name="creation_time" >
      <src null="true" >
        <from agent="service" contents="insert_time" />         
      </src>
      <type typename="datetime" >
        <restriction>
          <interval min="1970-1-1" max="2037-12-31"/>
        </restriction>
      </type>
      <comment>
      Date when this row was entered into database, to be
      set automatically by service (not by end user)
      </comment>
    </col>

    <col name="creator" >
      <src null="false" >
        <from agent="service"  contents="username" />
      </src>
      <type typename="varchar" size="12" />
      <comment>Service creating the row should determine user id invoking
             it and put it in this field.
      </comment>
    </col>
    <primary col="prim_key" /> 
    <index name="Offline_fk_index" cols="Offline_fk" />
  </table>
<!-- end Offline_to_Ancillary -->


  <table name="FClass_to_PClass" gui_readonly="true" version="v1r0"
    comment="relate FSW input classes to Parameter file classes">

     <col name="prim_key" >
       <src null="false">
         <from agent="auto_increment" />
       </src>
       <type typename="int" unsigned ="true" >
         <restriction>          
           <nonnegative />   
         </restriction>
       </type>
       <comment>This is the primary key, automatically set when a 
         row is inserted.</comment>
     </col>
    <col name="PClass_fk" >
      <src null="false" >
        <from agent="enduser" />
      </src>
      <type typename="int" unsigned="true" >
        <restriction>
          <nonnegative />
        </restriction>
      </type>
      <fk tableName="Parameter_class" keyCol="Parameter_class_key" />
      <comment>Refers to row in Parameters</comment>
    </col>
    <col name="FClass_fk" >
      <src null="false" >
        <from agent="enduser" />
      </src>
      <type typename="int" unsigned="true" >
        <restriction>
          <nonnegative />
        </restriction>
      </type>
      <fk tableName="FSW_class" keyCol="FSW_class_key" />
      <comment>Refers to row in FSW_inputs</comment>
    </col>

    <col name="status" >
      <src null="false" >
        <default value="TEST" />
      </src>
      <type typename="enum">
        <restriction>
          <enum use="require" values="ACTIVE TEST INACTIVE" />
        </restriction>
      </type>
      <comment>Relation may become inactive if procedure to produce
               Offline calib. changes
      </comment>
    </col>
    <col name="one_to_one">
      <src null="false">
        <default value="1" />
      </src>
      <type typename = "tinyint" />
      <comment>Value of 1 (default) signifies that parameter file of
       this PClass constitutes complete source for associated FSW_input
      </comment>

    </col>

    <primary col="prim_key" /> 
  </table>


  <table name="OClass_to_AClass" gui_readonly="true" version="v1r0"
    comment="relate Offline calib. classes to Ancillary file classes
    which are their sources">
     <col name="prim_key" >
       <src null="false">
         <from agent="auto_increment" />
       </src>
       <type typename="int" unsigned ="true" >
         <restriction>          
           <nonnegative />   
         </restriction>
       </type>
       <comment>This is the primary key, automatically set when a 
         row is inserted.</comment>
     </col>

    <col name="OClass_fk" >
      <src null="false" >
        <from agent="enduser" />
      </src>
      <type typename="int" unsigned="true" >
        <restriction>
          <nonnegative />
        </restriction>
      </type>
      <fk tableName="Offline_class" keyCol="Offline_class_key" />
      <comment>Refers to row in FSW_inputs</comment>
    </col>
    <col name="AClass_fk" >
      <src null="false" >
        <from agent="enduser" />
      </src>
      <type typename="int" unsigned="true" >
        <restriction>
          <nonnegative />
        </restriction>
      </type>
      <fk tableName="Ancillary_class" keyCol="Ancillary_class_key" />
      <comment>Refers to row in Ancillary</comment>
    </col>

    <col name="status" >
      <src null="false" >
        <default value="TEST" />
      </src>
      <type typename="enum">
        <restriction>
          <enum use="require" values="ACTIVE TEST INACTIVE" />
        </restriction>
      </type>
      <comment>Relation may become inactive if procedure to produce
               Offline calib. changes
      </comment>
    </col>
    <primary col="prim_key" /> 

    <index name="OClass_fk_index" cols="OClass_fk" />
  </table>



  <table name="PClass_to_AClass" gui_readonly="true" version="v1r0"
    comment="relate Parameter file classes to Ancillary file classes
    which are their sources">
     <col name="prim_key" >
       <src null="false">
         <from agent="auto_increment" />
       </src>
       <type typename="int" unsigned ="true" >
         <restriction>          
           <nonnegative />   
         </restriction>
       </type>
       <comment>This is the primary key, automatically set when a 
         row is inserted.</comment>
     </col>

    <col name="PClass_fk" >
      <src null="false" >
        <from agent="enduser" />
      </src>
      <type typename="int" unsigned="true" >
        <restriction>
          <nonnegative />
        </restriction>
      </type>
      <fk tableName="Parameter_class" keyCol="Parameter_class_key" />
      <comment>Refers to row in Parameter_class</comment>
    </col>
    <col name="AClass_fk" >
      <src null="false" >
        <from agent="enduser" />
      </src>
      <type typename="int" unsigned="true" >
        <restriction>
          <nonnegative />
        </restriction>
      </type>
      <fk tableName="Ancillary_class" keyCol="Ancillary_class_key" />
      <comment>Refers to row in Ancillary_class</comment>
    </col>

    <col name="status" >
      <src null="false" >
        <default value="TEST" />
      </src>
      <type typename="enum">
        <restriction>
          <enum use="require" values="ACTIVE TEST INACTIVE" />
        </restriction>
      </type>
      <comment>Relation may become inactive if procedure to produce
               Parameter file changes
      </comment>
    </col>
    <primary col="prim_key" /> 

    <!-- index name="PClass_fk_index" cols="PClass_fk" / -->
  </table>

  <table name="Instrument" gui_readonly="true" version="v1r0"
    comment="describe tower configuration for an instrument">

    <col name="instrument_key">
      <src null="false">
        <from agent="auto_increment" />
      </src>
      <type typename="int" unsigned="true">
        <restriction>          
          <nonnegative />   
        </restriction>
      </type>
      <comment>This is the primary key, automatically set when a 
          row is inserted.</comment>
    </col>

    <col name="name">
      <src null="false">
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="16" />
      <comment>e.g. LAT, CU06,...</comment>
    </col>

    <col name="CAL_baymask"> 
      <src null="false">
        <default value="0000" />
      </src>
      <type typename="varchar" size="4" />
      <comment>Which bays may contain a calorimeter module.  To
         be interpreted as a 16-bit hex number</comment>
    </col>
    <col name="TKR_baymask">
      <src null="false">
        <default value="0000" />
      </src>
      <type typename="varchar" size="4" />
      <comment>Which bays may contain a tracker module. To
          be interpreted as a 16-bit hex number</comment>
    </col>
    <primary col="instrument_key" /> 
  </table>

</rdbms>
