// -*- mode: c++ -*-
%module py_mootCore
%{
#include <string>
#include <stdexcept>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include "mootCore/MoodConnection.h"
#include "mootCore/FileDescrip.h"
#include "mootCore/MootQuery.h"
#include "mootCore/MootSys.h"
#include "mootCore/DbUtil.h"
#include "rdbModel/Db/Connection.h"
#include "rdbModel/Db/MysqlConnection.h"
#include "rdbModel/Db/ResultHandle.h"
#include "rdbModel/Tables/Table.h"
#include "rdbModel/Tables/Column.h"
#include "rdbModel/Tables/Assertion.h"
#include "rdbModel/RdbException.h"
#include "rdbModel/Management/Manager.h"
#include "rdbModel/Management/XercesBuilder.h"
#include "facilities/Util.h"
#include "facilities/Timestamp.h"
#include "mootCore/DbUtilException.h"
%}

%include stl.i
%include cpointer.i
%pointer_class(bool, boolp);
%pointer_class(unsigned, unsignedp);
%pointer_class(int, intp);
%template(vectorOfString) std::vector<std::string>;
%template(vectorOfUnsigned) std::vector<unsigned>;

%include $(FACILITIESROOT)/facilities/Util.h
%include $(RDBMODELROOT)/rdbModel/RdbException.h
%include $(MOOTCOREROOT)/mootCore/DbUtilException.h
%exception {
   try 
   {
     $action
   } catch (facilities::Untranslatable & fObj) {
     PyErr_SetString(PyExc_RuntimeError, const_cast<char*>(fObj.what()));
     return NULL;
   } catch (rdbModel::RdbException & rObj) {
     PyErr_SetString(PyExc_RuntimeError, const_cast<char*>(rObj.what()));
     return NULL;
   } catch (MOOT::DbUtilException & rObj) {
     PyErr_SetString(PyExc_RuntimeError, const_cast<char*>(rObj.what()));
     return NULL;
   } catch (std::exception & eObj) {
      PyErr_SetString(PyExc_RuntimeError, const_cast<char*>(eObj.what()));
      return NULL;
   }
}

%include ../mootCore/MoodConnection.h
%include ../mootCore/FileDescrip.h
%template(vectorOfFileDescrip) std::vector<MOOT::FileDescrip>;
%template(vectorOfFswInfo) std::vector<MOOT::FswInfo>;
%template(vectorOfConfigInfo) std::vector<MOOT::ConfigInfo>;
%include ../mootCore/MootQuery.h

%extend MOOT::MootQuery {
  std::vector<std::string> ancillaryClassNames() {
    std::vector<std::string> my_names;
    self->getAncillaryClasses(my_names);
    return my_names;
  }

  std::vector<unsigned> ancillaryAliasKeys(const std::string& aClass="*",
                                           const std::string& aName="*") {
    std::vector<unsigned> my_keys;
    self->listAncillaryAliasKeys(my_keys, aClass, aName);
    return my_keys;
  }
    

  std::vector<unsigned> ancillaryKeys(const std::string& aClass="*",
                                      const std::string& status="CREATED",
                                      const std::string& quality="PROD",
                                      const std::string& instr="LAT") {
    std::vector<unsigned> my_keys;
    self->listAncillaryKeys(my_keys, aClass, status, quality, instr);
    return my_keys;
  }
    
  std::vector<std::string> configInputs(unsigned i) {
    std::vector<std::string> my_values;
    self->getConfigInputs(i, my_values);
    return my_values;
  }
  std::vector<std::string> configInputs(const std::string& i) {
    std::vector<std::string> my_values;
    self->getConfigInputs(i, my_values);
    return my_values;
  }
  std::vector<std::string> configFmxPaths(unsigned i) {
    std::vector<std::string> my_paths;
    self->getConfigFmxPaths(i, my_paths);
    return my_paths;
  }

  std::vector<std::string> configFmxPaths(const std::string& i) {
    std::vector<std::string> my_paths;
    self->getConfigFmxPaths(i, my_paths);
    return my_paths;
  }

  std::vector<std::string> configFmxPathsByName(const std::string& configName)
    {
      std::vector<std::string> my_paths;
      self->getConfigFmxPathsByName(configName, my_paths);
      return my_paths;
    }

  std::vector<std::string> configFmxPathsByAlg(const std::string& algName,
                                               const std::string& step) {
    std::vector<std::string> my_paths;
    self->getConfigFmxPathsByAlg(algName, step, my_paths);
    return my_paths;
  }

  std::vector<std::string> configFmxPathsByAlg(const std::string& algName,
                                               unsigned step) {
    std::vector<std::string> my_paths;
    self->getConfigFmxPathsByAlg(algName, step, my_paths);
    return my_paths;
  }

  std::vector<MOOT::FileDescrip> latcSrc(const std::string& latcMasterKey) {
    std::vector<MOOT::FileDescrip> my_descrips;
    self->getLatcSrc(latcMasterKey, my_descrips);
    return my_descrips;
  }

  std::vector<MOOT::FileDescrip> latcSrc(unsigned latcMasterKey) {
    std::vector<MOOT::FileDescrip> my_descrips;
    self->getLatcSrc(latcMasterKey, my_descrips);
    return my_descrips;
  }

  std::vector<MOOT::FswInfo> configFswInfo(const std::string& configKey) {
    std::vector<MOOT::FswInfo> my_info;
    self->getConfigFswInfo(configKey, my_info);
    return my_info;
  }

  std::vector<MOOT::FswInfo> configFswInfo(unsigned configKey) {
    std::vector<MOOT::FswInfo> my_info;
    self->getConfigFswInfo(configKey, my_info);
    return my_info;
  }

  std::vector<MOOT::FswInfo> configFswInfo(const std::string& configKey, 
                                           bool* status) {
    std::vector<MOOT::FswInfo> my_info;
    (*status) = self->getConfigFswInfo(configKey, my_info);
    return my_info;
  }

  std::vector<MOOT::FswInfo> 
    configFswInfoByName(const std::string& config) {
    std::vector<MOOT::FswInfo> my_info;
    self->getConfigFswInfoByName(config, my_info);
    return my_info;
  }

  std::vector<MOOT::FswInfo> 
    configFswInfoByAlg(const std::string& alg, const std::string& step) {
    std::vector<MOOT::FswInfo> my_info;
    self->getConfigFswInfoByAlg(alg, step, my_info);
    return my_info;
  }

  std::vector<MOOT::FswInfo> 
    configFswInfoByAlg(const std::string& alg, unsigned step) {
    std::vector<MOOT::FswInfo> my_info;
    self->getConfigFswInfoByAlg(alg, step, my_info);
    return my_info;
  }

  std::vector<unsigned> configKeys(const std::string& status="CREATED",
                                   const std::string& instr="LAT") {

    std::vector<unsigned> my_keys;
    self->listConfigKeys(my_keys, status, instr);
    return my_keys;
  }

  std::vector<unsigned> configKeysByName(const std::string& name,
                                         const std::string& status="CREATED",
                                         const std::string& instr="LAT")    {
    std::vector<unsigned> my_keys;
    self->getConfigKeysByName(my_keys, name, status, instr);
    return my_keys;
  }

  std::vector<unsigned> configKeysByAlg(const std::string& algname,
                                        unsigned step=1,
                                        const std::string& status="CREATED",
                                        const std::string& instr="LAT")    {
    std::vector<unsigned> my_keys;
    self->getConfigKeysByAlg(my_keys, algname, step, status, instr);
    return my_keys;
  }

  std::vector<MOOT::ConfigInfo> 
    configInfoList(const std::string& status="CREATED",
                   const std::string instr="LAT",
                   const std::string& mode="") {

    std::vector<MOOT::ConfigInfo> my_info;
    self->getConfigInfo(my_info, status, instr, mode);
    return my_info;
  }

  std::vector<unsigned>    configParmsUsed(unsigned configKey) {
    std::vector<unsigned> parmKeys;
    self->getConfigParmsUsed(configKey, parmKeys);
    return parmKeys;
  }

  std::vector<unsigned>    configParmsRequest(unsigned configKey) {
    std::vector<unsigned> parmKeys;
    self->getConfigParmsRequest(configKey, parmKeys);
    return parmKeys;
  }

  std::vector<std::string> parameterClassNames( ) {
    std::vector<std::string> names;
    self->getParameterClasses(names);
    return names;
  }

  std::vector<std::string> precinctNames() {
    std::vector<std::string> my_names;
    self->getPrecincts(my_names);
    return my_names;
  }

  std::vector<unsigned> voteAliasKeys(const std::string& precinct="*",
                                      const std::string& aName="*") {
    std::vector<unsigned> my_keys;
    self->listVoteAliasKeys(my_keys, precinct, aName);
    return my_keys;
  }
    

  std::vector<unsigned> voteKeys(const std::string& precinct="*",
                                 const std::string& status="CREATED",
                                 const std::string& instr="LAT") {
    std::vector<unsigned> my_keys;
    self->listVoteKeys(my_keys, precinct, status, instr);
    return my_keys;
  }
    

}

